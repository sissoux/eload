
Battery_e-load.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085e0  080085e0  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080085e0  080085e0  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085e0  080085e0  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085e0  080085e0  000185e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085e4  080085e4  000185e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080085e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b28  20000180  08008768  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca8  08008768  00020ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255f3  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000047a5  00000000  00000000  000457a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c10  00000000  00000000  00049f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019d8  00000000  00000000  0004bb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000254a8  00000000  00000000  0004d530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a3f2  00000000  00000000  000729d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e0820  00000000  00000000  0008cdca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016d5ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075bc  00000000  00000000  0016d668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008570 	.word	0x08008570

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	08008570 	.word	0x08008570

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f001 f900 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f007 fb29 	bl	8007890 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f001 f90c 	bl	800148e <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f001 f8d8 	bl	800143e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000118 	.word	0x20000118
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200003c4 	.word	0x200003c4
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200003c4 	.word	0x200003c4

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	431a      	orrs	r2, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	609a      	str	r2, [r3, #8]
}
 8000356:	bf00      	nop
 8000358:	370c      	adds	r7, #12
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000374:	683b      	ldr	r3, [r7, #0]
 8000376:	431a      	orrs	r2, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	609a      	str	r2, [r3, #8]
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000398:	4618      	mov	r0, r3
 800039a:	370c      	adds	r7, #12
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80003a4:	b490      	push	{r4, r7}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
 80003b0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	3360      	adds	r3, #96	; 0x60
 80003b6:	461a      	mov	r2, r3
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80003c0:	6822      	ldr	r2, [r4, #0]
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <LL_ADC_SetOffset+0x40>)
 80003c4:	4013      	ands	r3, r2
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	430a      	orrs	r2, r1
 80003d0:	4313      	orrs	r3, r2
 80003d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80003d6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80003d8:	bf00      	nop
 80003da:	3710      	adds	r7, #16
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc90      	pop	{r4, r7}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	03fff000 	.word	0x03fff000

080003e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80003e8:	b490      	push	{r4, r7}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	3360      	adds	r3, #96	; 0x60
 80003f6:	461a      	mov	r2, r3
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4413      	add	r3, r2
 80003fe:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000400:	6823      	ldr	r3, [r4, #0]
 8000402:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000406:	4618      	mov	r0, r3
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bc90      	pop	{r4, r7}
 800040e:	4770      	bx	lr

08000410 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000410:	b490      	push	{r4, r7}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	3360      	adds	r3, #96	; 0x60
 8000420:	461a      	mov	r2, r3
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4313      	orrs	r3, r2
 8000434:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bc90      	pop	{r4, r7}
 800043e:	4770      	bx	lr

08000440 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000440:	b490      	push	{r4, r7}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	3360      	adds	r3, #96	; 0x60
 8000450:	461a      	mov	r2, r3
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	4413      	add	r3, r2
 8000458:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800045a:	6823      	ldr	r3, [r4, #0]
 800045c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4313      	orrs	r3, r2
 8000464:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bc90      	pop	{r4, r7}
 800046e:	4770      	bx	lr

08000470 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000470:	b490      	push	{r4, r7}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	3360      	adds	r3, #96	; 0x60
 8000480:	461a      	mov	r2, r3
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800048a:	6823      	ldr	r3, [r4, #0]
 800048c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4313      	orrs	r3, r2
 8000494:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bc90      	pop	{r4, r7}
 800049e:	4770      	bx	lr

080004a0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	431a      	orrs	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	615a      	str	r2, [r3, #20]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80004c6:	b490      	push	{r4, r7}
 80004c8:	b084      	sub	sp, #16
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3330      	adds	r3, #48	; 0x30
 80004d6:	461a      	mov	r2, r3
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	0a1b      	lsrs	r3, r3, #8
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	4413      	add	r3, r2
 80004e4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80004e6:	6822      	ldr	r2, [r4, #0]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	f003 031f 	and.w	r3, r3, #31
 80004ee:	211f      	movs	r1, #31
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	401a      	ands	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	0e9b      	lsrs	r3, r3, #26
 80004fc:	f003 011f 	and.w	r1, r3, #31
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	f003 031f 	and.w	r3, r3, #31
 8000506:	fa01 f303 	lsl.w	r3, r1, r3
 800050a:	4313      	orrs	r3, r2
 800050c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bc90      	pop	{r4, r7}
 8000516:	4770      	bx	lr

08000518 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000518:	b490      	push	{r4, r7}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	3314      	adds	r3, #20
 8000528:	461a      	mov	r2, r3
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	0e5b      	lsrs	r3, r3, #25
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	4413      	add	r3, r2
 8000536:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	0d1b      	lsrs	r3, r3, #20
 800053e:	f003 031f 	and.w	r3, r3, #31
 8000542:	2107      	movs	r1, #7
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	401a      	ands	r2, r3
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	0d1b      	lsrs	r3, r3, #20
 8000550:	f003 031f 	and.w	r3, r3, #31
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4313      	orrs	r3, r2
 800055c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800055e:	bf00      	nop
 8000560:	3710      	adds	r7, #16
 8000562:	46bd      	mov	sp, r7
 8000564:	bc90      	pop	{r4, r7}
 8000566:	4770      	bx	lr

08000568 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000580:	43db      	mvns	r3, r3
 8000582:	401a      	ands	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	f003 0318 	and.w	r3, r3, #24
 800058a:	4908      	ldr	r1, [pc, #32]	; (80005ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800058c:	40d9      	lsrs	r1, r3
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	400b      	ands	r3, r1
 8000592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000596:	431a      	orrs	r2, r3
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	0007ffff 	.word	0x0007ffff

080005b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80005c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6093      	str	r3, [r2, #8]
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005e8:	d101      	bne.n	80005ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80005ee:	2300      	movs	r3, #0
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800060c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000610:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000638:	d101      	bne.n	800063e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800063a:	2301      	movs	r3, #1
 800063c:	e000      	b.n	8000640 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	f003 0301 	and.w	r3, r3, #1
 800065c:	2b01      	cmp	r3, #1
 800065e:	d101      	bne.n	8000664 <LL_ADC_IsEnabled+0x18>
 8000660:	2301      	movs	r3, #1
 8000662:	e000      	b.n	8000666 <LL_ADC_IsEnabled+0x1a>
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	f003 0304 	and.w	r3, r3, #4
 8000682:	2b04      	cmp	r3, #4
 8000684:	d101      	bne.n	800068a <LL_ADC_REG_IsConversionOngoing+0x18>
 8000686:	2301      	movs	r3, #1
 8000688:	e000      	b.n	800068c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d101      	bne.n	80006b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80006c0:	b590      	push	{r4, r7, lr}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c8:	2300      	movs	r3, #0
 80006ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d101      	bne.n	80006da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e16b      	b.n	80009b2 <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d109      	bne.n	80006fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f006 fd8f 	bl	800720c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff67 	bl	80005d4 <LL_ADC_IsDeepPowerDownEnabled>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d004      	beq.n	8000716 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ff4d 	bl	80005b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff ff82 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d113      	bne.n	800074e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff66 	bl	80005fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000730:	4ba2      	ldr	r3, [pc, #648]	; (80009bc <HAL_ADC_Init+0x2fc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	099b      	lsrs	r3, r3, #6
 8000736:	4aa2      	ldr	r2, [pc, #648]	; (80009c0 <HAL_ADC_Init+0x300>)
 8000738:	fba2 2303 	umull	r2, r3, r2, r3
 800073c:	099b      	lsrs	r3, r3, #6
 800073e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000740:	e002      	b.n	8000748 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	3b01      	subs	r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d1f9      	bne.n	8000742 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff66 	bl	8000624 <LL_ADC_IsInternalRegulatorEnabled>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10d      	bne.n	800077a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000762:	f043 0210 	orr.w	r2, r3, #16
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800076e:	f043 0201 	orr.w	r2, r3, #1
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff77 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000784:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	2b00      	cmp	r3, #0
 8000790:	f040 8106 	bne.w	80009a0 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 8102 	bne.w	80009a0 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80007a4:	f043 0202 	orr.w	r2, r3, #2
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff4b 	bl	800064c <LL_ADC_IsEnabled>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d111      	bne.n	80007e0 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80007bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80007c0:	f7ff ff44 	bl	800064c <LL_ADC_IsEnabled>
 80007c4:	4604      	mov	r4, r0
 80007c6:	487f      	ldr	r0, [pc, #508]	; (80009c4 <HAL_ADC_Init+0x304>)
 80007c8:	f7ff ff40 	bl	800064c <LL_ADC_IsEnabled>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4323      	orrs	r3, r4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	487b      	ldr	r0, [pc, #492]	; (80009c8 <HAL_ADC_Init+0x308>)
 80007dc:	f7ff fdae 	bl	800033c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7f5b      	ldrb	r3, [r3, #29]
 80007e4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80007ea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80007f0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80007f6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007fe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000800:	4313      	orrs	r3, r2
 8000802:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800080a:	2b01      	cmp	r3, #1
 800080c:	d106      	bne.n	800081c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000812:	3b01      	subs	r3, #1
 8000814:	045b      	lsls	r3, r3, #17
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4313      	orrs	r3, r2
 800081a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000820:	2b00      	cmp	r3, #0
 8000822:	d009      	beq.n	8000838 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000832:	69ba      	ldr	r2, [r7, #24]
 8000834:	4313      	orrs	r3, r2
 8000836:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	68da      	ldr	r2, [r3, #12]
 800083e:	4b63      	ldr	r3, [pc, #396]	; (80009cc <HAL_ADC_Init+0x30c>)
 8000840:	4013      	ands	r3, r2
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	6812      	ldr	r2, [r2, #0]
 8000846:	69b9      	ldr	r1, [r7, #24]
 8000848:	430b      	orrs	r3, r1
 800084a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	691b      	ldr	r3, [r3, #16]
 8000852:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ff03 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 800086c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff10 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 8000878:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d16d      	bne.n	800095c <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d16a      	bne.n	800095c <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800088a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000892:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8000894:	4313      	orrs	r3, r2
 8000896:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68db      	ldr	r3, [r3, #12]
 800089e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008a2:	f023 0302 	bic.w	r3, r3, #2
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6812      	ldr	r2, [r2, #0]
 80008aa:	69b9      	ldr	r1, [r7, #24]
 80008ac:	430b      	orrs	r3, r1
 80008ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d017      	beq.n	80008e8 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	691a      	ldr	r2, [r3, #16]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80008d0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80008d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	6911      	ldr	r1, [r2, #16]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	6812      	ldr	r2, [r2, #0]
 80008e0:	430b      	orrs	r3, r1
 80008e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80008e6:	e013      	b.n	8000910 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	691a      	ldr	r2, [r3, #16]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	6812      	ldr	r2, [r2, #0]
 8000904:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000908:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800090c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000916:	2b01      	cmp	r3, #1
 8000918:	d118      	bne.n	800094c <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000924:	f023 0304 	bic.w	r3, r3, #4
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8000930:	4311      	orrs	r1, r2
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000936:	4311      	orrs	r1, r2
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800093c:	430a      	orrs	r2, r1
 800093e:	431a      	orrs	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f042 0201 	orr.w	r2, r2, #1
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	e007      	b.n	800095c <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	691a      	ldr	r2, [r3, #16]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f022 0201 	bic.w	r2, r2, #1
 800095a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10c      	bne.n	800097e <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f023 010f 	bic.w	r1, r3, #15
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a1b      	ldr	r3, [r3, #32]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	430a      	orrs	r2, r1
 800097a:	631a      	str	r2, [r3, #48]	; 0x30
 800097c:	e007      	b.n	800098e <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f022 020f 	bic.w	r2, r2, #15
 800098c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	f043 0201 	orr.w	r2, r3, #1
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	65da      	str	r2, [r3, #92]	; 0x5c
 800099e:	e007      	b.n	80009b0 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80009a4:	f043 0210 	orr.w	r2, r3, #16
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80009ac:	2301      	movs	r3, #1
 80009ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80009b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3724      	adds	r7, #36	; 0x24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd90      	pop	{r4, r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000118 	.word	0x20000118
 80009c0:	053e2d63 	.word	0x053e2d63
 80009c4:	50000100 	.word	0x50000100
 80009c8:	50000300 	.word	0x50000300
 80009cc:	fff04007 	.word	0xfff04007

080009d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b0a6      	sub	sp, #152	; 0x98
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d101      	bne.n	80009f2 <HAL_ADC_ConfigChannel+0x22>
 80009ee:	2302      	movs	r3, #2
 80009f0:	e348      	b.n	8001084 <HAL_ADC_ConfigChannel+0x6b4>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fe37 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 832d 	bne.w	8001066 <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	6859      	ldr	r1, [r3, #4]
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f7ff fd54 	bl	80004c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff fe25 	bl	8000672 <LL_ADC_REG_IsConversionOngoing>
 8000a28:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fe31 	bl	8000698 <LL_ADC_INJ_IsConversionOngoing>
 8000a36:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000a3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 817b 	bne.w	8000d3a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000a44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	f040 8176 	bne.w	8000d3a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a56:	d10f      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	f7ff fd58 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fd15 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>
 8000a76:	e00e      	b.n	8000a96 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	6819      	ldr	r1, [r3, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	461a      	mov	r2, r3
 8000a86:	f7ff fd47 	bl	8000518 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fd05 	bl	80004a0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	695a      	ldr	r2, [r3, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	f003 0303 	and.w	r3, r3, #3
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d022      	beq.n	8000afe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6919      	ldr	r1, [r3, #16]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ac8:	f7ff fc6c 	bl	80003a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	6919      	ldr	r1, [r3, #16]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f7ff fcb1 	bl	8000440 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6818      	ldr	r0, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	6919      	ldr	r1, [r3, #16]
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	7f1b      	ldrb	r3, [r3, #28]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <HAL_ADC_ConfigChannel+0x124>
 8000aee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000af2:	e000      	b.n	8000af6 <HAL_ADC_ConfigChannel+0x126>
 8000af4:	2300      	movs	r3, #0
 8000af6:	461a      	mov	r2, r3
 8000af8:	f7ff fcba 	bl	8000470 <LL_ADC_SetOffsetSaturation>
 8000afc:	e11d      	b.n	8000d3a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff fc6f 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d10a      	bne.n	8000b2a <HAL_ADC_ConfigChannel+0x15a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fc64 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b20:	4603      	mov	r3, r0
 8000b22:	0e9b      	lsrs	r3, r3, #26
 8000b24:	f003 021f 	and.w	r2, r3, #31
 8000b28:	e012      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x180>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fc59 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000b40:	fa93 f3a3 	rbit	r3, r3
 8000b44:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000b46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000b48:	fab3 f383 	clz	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	461a      	mov	r2, r3
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d105      	bne.n	8000b68 <HAL_ADC_ConfigChannel+0x198>
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	0e9b      	lsrs	r3, r3, #26
 8000b62:	f003 031f 	and.w	r3, r3, #31
 8000b66:	e00a      	b.n	8000b7e <HAL_ADC_ConfigChannel+0x1ae>
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000b70:	fa93 f3a3 	rbit	r3, r3
 8000b74:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8000b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b78:	fab3 f383 	clz	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d106      	bne.n	8000b90 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2200      	movs	r2, #0
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fc40 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2101      	movs	r1, #1
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fc26 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d10a      	bne.n	8000bbc <HAL_ADC_ConfigChannel+0x1ec>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2101      	movs	r1, #1
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fc1b 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	0e9b      	lsrs	r3, r3, #26
 8000bb6:	f003 021f 	and.w	r2, r3, #31
 8000bba:	e010      	b.n	8000bde <HAL_ADC_ConfigChannel+0x20e>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fc10 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bce:	fa93 f3a3 	rbit	r3, r3
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8000bd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bd6:	fab3 f383 	clz	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	461a      	mov	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d105      	bne.n	8000bf6 <HAL_ADC_ConfigChannel+0x226>
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	0e9b      	lsrs	r3, r3, #26
 8000bf0:	f003 031f 	and.w	r3, r3, #31
 8000bf4:	e00a      	b.n	8000c0c <HAL_ADC_ConfigChannel+0x23c>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bfe:	fa93 f3a3 	rbit	r3, r3
 8000c02:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8000c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c06:	fab3 f383 	clz	r3, r3
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d106      	bne.n	8000c1e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2200      	movs	r2, #0
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fbf9 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2102      	movs	r1, #2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fbdf 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d10a      	bne.n	8000c4a <HAL_ADC_ConfigChannel+0x27a>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2102      	movs	r1, #2
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fbd4 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	0e9b      	lsrs	r3, r3, #26
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	e010      	b.n	8000c6c <HAL_ADC_ConfigChannel+0x29c>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2102      	movs	r1, #2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fbc9 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c5c:	fa93 f3a3 	rbit	r3, r3
 8000c60:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8000c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c64:	fab3 f383 	clz	r3, r3
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <HAL_ADC_ConfigChannel+0x2b4>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	0e9b      	lsrs	r3, r3, #26
 8000c7e:	f003 031f 	and.w	r3, r3, #31
 8000c82:	e00a      	b.n	8000c9a <HAL_ADC_ConfigChannel+0x2ca>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c8c:	fa93 f3a3 	rbit	r3, r3
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8000c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d106      	bne.n	8000cac <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fbb2 	bl	8000410 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fb98 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x308>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2103      	movs	r1, #3
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fb8d 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	0e9b      	lsrs	r3, r3, #26
 8000cd2:	f003 021f 	and.w	r2, r3, #31
 8000cd6:	e010      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x32a>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2103      	movs	r1, #3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fb82 	bl	80003e8 <LL_ADC_GetOffsetChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8000cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d105      	bne.n	8000d12 <HAL_ADC_ConfigChannel+0x342>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	0e9b      	lsrs	r3, r3, #26
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	e00a      	b.n	8000d28 <HAL_ADC_ConfigChannel+0x358>
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8000d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d106      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	2103      	movs	r1, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb6b 	bl	8000410 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc84 	bl	800064c <LL_ADC_IsEnabled>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f040 810c 	bne.w	8000f64 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6818      	ldr	r0, [r3, #0]
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f7ff fc05 	bl	8000568 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	4aab      	ldr	r2, [pc, #684]	; (8001010 <HAL_ADC_ConfigChannel+0x640>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	f040 80fd 	bne.w	8000f64 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10b      	bne.n	8000d92 <HAL_ADC_ConfigChannel+0x3c2>
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	0e9b      	lsrs	r3, r3, #26
 8000d80:	3301      	adds	r3, #1
 8000d82:	f003 031f 	and.w	r3, r3, #31
 8000d86:	2b09      	cmp	r3, #9
 8000d88:	bf94      	ite	ls
 8000d8a:	2301      	movls	r3, #1
 8000d8c:	2300      	movhi	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	e012      	b.n	8000db8 <HAL_ADC_ConfigChannel+0x3e8>
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8000da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da2:	fab3 f383 	clz	r3, r3
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	f003 031f 	and.w	r3, r3, #31
 8000dae:	2b09      	cmp	r3, #9
 8000db0:	bf94      	ite	ls
 8000db2:	2301      	movls	r3, #1
 8000db4:	2300      	movhi	r3, #0
 8000db6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d064      	beq.n	8000e86 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d107      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x408>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	0e9b      	lsrs	r3, r3, #26
 8000dce:	3301      	adds	r3, #1
 8000dd0:	069b      	lsls	r3, r3, #26
 8000dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000dd6:	e00e      	b.n	8000df6 <HAL_ADC_ConfigChannel+0x426>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000de0:	fa93 f3a3 	rbit	r3, r3
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	3301      	adds	r3, #1
 8000df0:	069b      	lsls	r3, r3, #26
 8000df2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d109      	bne.n	8000e16 <HAL_ADC_ConfigChannel+0x446>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	0e9b      	lsrs	r3, r3, #26
 8000e08:	3301      	adds	r3, #1
 8000e0a:	f003 031f 	and.w	r3, r3, #31
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	e010      	b.n	8000e38 <HAL_ADC_ConfigChannel+0x468>
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1e:	fa93 f3a3 	rbit	r3, r3
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8000e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e26:	fab3 f383 	clz	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d10a      	bne.n	8000e5e <HAL_ADC_ConfigChannel+0x48e>
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	0e9b      	lsrs	r3, r3, #26
 8000e4e:	3301      	adds	r3, #1
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	051b      	lsls	r3, r3, #20
 8000e5c:	e011      	b.n	8000e82 <HAL_ADC_ConfigChannel+0x4b2>
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	3301      	adds	r3, #1
 8000e76:	f003 021f 	and.w	r2, r3, #31
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000e82:	430b      	orrs	r3, r1
 8000e84:	e069      	b.n	8000f5a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d107      	bne.n	8000ea2 <HAL_ADC_ConfigChannel+0x4d2>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	0e9b      	lsrs	r3, r3, #26
 8000e98:	3301      	adds	r3, #1
 8000e9a:	069b      	lsls	r3, r3, #26
 8000e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ea0:	e00e      	b.n	8000ec0 <HAL_ADC_ConfigChannel+0x4f0>
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	6a3b      	ldr	r3, [r7, #32]
 8000eaa:	fa93 f3a3 	rbit	r3, r3
 8000eae:	61fb      	str	r3, [r7, #28]
  return result;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	fab3 f383 	clz	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3301      	adds	r3, #1
 8000eba:	069b      	lsls	r3, r3, #26
 8000ebc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d109      	bne.n	8000ee0 <HAL_ADC_ConfigChannel+0x510>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	0e9b      	lsrs	r3, r3, #26
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	f003 031f 	and.w	r3, r3, #31
 8000ed8:	2101      	movs	r1, #1
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	e010      	b.n	8000f02 <HAL_ADC_ConfigChannel+0x532>
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	fa93 f3a3 	rbit	r3, r3
 8000eec:	617b      	str	r3, [r7, #20]
  return result;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	f003 031f 	and.w	r3, r3, #31
 8000efc:	2101      	movs	r1, #1
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	ea42 0103 	orr.w	r1, r2, r3
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10d      	bne.n	8000f2e <HAL_ADC_ConfigChannel+0x55e>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0e9b      	lsrs	r3, r3, #26
 8000f18:	3301      	adds	r3, #1
 8000f1a:	f003 021f 	and.w	r2, r3, #31
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	3b1e      	subs	r3, #30
 8000f26:	051b      	lsls	r3, r3, #20
 8000f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	e014      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x588>
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	60fb      	str	r3, [r7, #12]
  return result;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	fab3 f383 	clz	r3, r3
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	3301      	adds	r3, #1
 8000f46:	f003 021f 	and.w	r2, r3, #31
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b1e      	subs	r3, #30
 8000f52:	051b      	lsls	r3, r3, #20
 8000f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	6892      	ldr	r2, [r2, #8]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fada 	bl	8000518 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <HAL_ADC_ConfigChannel+0x644>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	f000 8083 	beq.w	8001078 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000f72:	4829      	ldr	r0, [pc, #164]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 8000f74:	f7ff fa08 	bl	8000388 <LL_ADC_GetCommonPathInternalCh>
 8000f78:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a26      	ldr	r2, [pc, #152]	; (800101c <HAL_ADC_ConfigChannel+0x64c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d004      	beq.n	8000f90 <HAL_ADC_ConfigChannel+0x5c0>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a25      	ldr	r2, [pc, #148]	; (8001020 <HAL_ADC_ConfigChannel+0x650>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d126      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8000f90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d120      	bne.n	8000fde <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fa4:	d168      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000faa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4819      	ldr	r0, [pc, #100]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 8000fb2:	f7ff f9d6 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000fb6:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_ADC_ConfigChannel+0x654>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	099b      	lsrs	r3, r3, #6
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_ADC_ConfigChannel+0x658>)
 8000fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc2:	099a      	lsrs	r2, r3, #6
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fce:	e002      	b.n	8000fd6 <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d1f9      	bne.n	8000fd0 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8000fdc:	e04c      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <HAL_ADC_ConfigChannel+0x65c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d125      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x664>
 8000fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11f      	bne.n	8001034 <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <HAL_ADC_ConfigChannel+0x660>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d03c      	beq.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8000ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001002:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001006:	4619      	mov	r1, r3
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_ADC_ConfigChannel+0x648>)
 800100a:	f7ff f9aa 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800100e:	e033      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
 8001010:	407f0000 	.word	0x407f0000
 8001014:	80080000 	.word	0x80080000
 8001018:	50000300 	.word	0x50000300
 800101c:	c3210000 	.word	0xc3210000
 8001020:	90c00010 	.word	0x90c00010
 8001024:	20000118 	.word	0x20000118
 8001028:	053e2d63 	.word	0x053e2d63
 800102c:	c7520000 	.word	0xc7520000
 8001030:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a14      	ldr	r2, [pc, #80]	; (800108c <HAL_ADC_ConfigChannel+0x6bc>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d11c      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800103e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_ADC_ConfigChannel+0x6c0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d011      	beq.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105c:	4619      	mov	r1, r3
 800105e:	480d      	ldr	r0, [pc, #52]	; (8001094 <HAL_ADC_ConfigChannel+0x6c4>)
 8001060:	f7ff f97f 	bl	8000362 <LL_ADC_SetCommonPathInternalCh>
 8001064:	e008      	b.n	8001078 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	f043 0220 	orr.w	r2, r3, #32
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8001080:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001084:	4618      	mov	r0, r3
 8001086:	3798      	adds	r7, #152	; 0x98
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	cb840000 	.word	0xcb840000
 8001090:	50000100 	.word	0x50000100
 8001094:	50000300 	.word	0x50000300

08001098 <LL_ADC_IsEnabled>:
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d101      	bne.n	80010b0 <LL_ADC_IsEnabled+0x18>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <LL_ADC_IsEnabled+0x1a>
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_ADC_REG_IsConversionOngoing>:
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	d101      	bne.n	80010d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b0a1      	sub	sp, #132	; 0x84
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d101      	bne.n	8001102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80010fe:	2302      	movs	r3, #2
 8001100:	e087      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001112:	d102      	bne.n	800111a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8001114:	4b41      	ldr	r3, [pc, #260]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	e001      	b.n	800111e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	f043 0220 	orr.w	r2, r3, #32
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e06a      	b.n	8001212 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffbd 	bl	80010be <LL_ADC_REG_IsConversionOngoing>
 8001144:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffb7 	bl	80010be <LL_ADC_REG_IsConversionOngoing>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d14c      	bne.n	80011f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001158:	2b00      	cmp	r3, #0
 800115a:	d149      	bne.n	80011f0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800115c:	4b30      	ldr	r3, [pc, #192]	; (8001220 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800115e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d028      	beq.n	80011ba <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800117a:	035b      	lsls	r3, r3, #13
 800117c:	430b      	orrs	r3, r1
 800117e:	431a      	orrs	r2, r3
 8001180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001182:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001184:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001188:	f7ff ff86 	bl	8001098 <LL_ADC_IsEnabled>
 800118c:	4604      	mov	r4, r0
 800118e:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8001190:	f7ff ff82 	bl	8001098 <LL_ADC_IsEnabled>
 8001194:	4603      	mov	r3, r0
 8001196:	4323      	orrs	r3, r4
 8001198:	2b00      	cmp	r3, #0
 800119a:	d133      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800119c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011a4:	f023 030f 	bic.w	r3, r3, #15
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	6811      	ldr	r1, [r2, #0]
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	6892      	ldr	r2, [r2, #8]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011b8:	e024      	b.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80011ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011c6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80011ca:	f7ff ff65 	bl	8001098 <LL_ADC_IsEnabled>
 80011ce:	4604      	mov	r4, r0
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 80011d2:	f7ff ff61 	bl	8001098 <LL_ADC_IsEnabled>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4323      	orrs	r3, r4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d112      	bne.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80011de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80011e6:	f023 030f 	bic.w	r3, r3, #15
 80011ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80011ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80011ee:	e009      	b.n	8001204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f4:	f043 0220 	orr.w	r2, r3, #32
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001202:	e000      	b.n	8001206 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800120e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001212:	4618      	mov	r0, r3
 8001214:	3784      	adds	r7, #132	; 0x84
 8001216:	46bd      	mov	sp, r7
 8001218:	bd90      	pop	{r4, r7, pc}
 800121a:	bf00      	nop
 800121c:	50000100 	.word	0x50000100
 8001220:	50000300 	.word	0x50000300

08001224 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e023      	b.n	800127e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d106      	bne.n	8001250 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f006 f8bc 	bl	80073c8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a4:	4013      	ands	r3, r2
 80012a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ba:	4a04      	ldr	r2, [pc, #16]	; (80012cc <__NVIC_SetPriorityGrouping+0x44>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	60d3      	str	r3, [r2, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d4:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <__NVIC_GetPriorityGrouping+0x18>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	0a1b      	lsrs	r3, r3, #8
 80012da:	f003 0307 	and.w	r3, r3, #7
}
 80012de:	4618      	mov	r0, r3
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db0b      	blt.n	8001316 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	f003 021f 	and.w	r2, r3, #31
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <__NVIC_EnableIRQ+0x38>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	095b      	lsrs	r3, r3, #5
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f202 	lsl.w	r2, r0, r2
 8001312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001316:	bf00      	nop
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000e100 	.word	0xe000e100

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	; (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	; (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	; 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	; (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	; (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff29 	bl	8001288 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff40 	bl	80012d0 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff33 	bl	80012ec <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa4 	bl	80013e4 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e014      	b.n	80014e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f005 ffd7 	bl	800747c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	795b      	ldrb	r3, [r3, #5]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_DAC_Start+0x16>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e043      	b.n	8001588 <HAL_DAC_Start+0x9e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2201      	movs	r2, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f7fe fee7 	bl	80002f8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800153a:	2b02      	cmp	r3, #2
 800153c:	d11d      	bne.n	800157a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	e014      	b.n	800157a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f003 0310 	and.w	r3, r3, #16
 8001560:	2102      	movs	r1, #2
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	429a      	cmp	r2, r3
 8001568:	d107      	bne.n	800157a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685a      	ldr	r2, [r3, #4]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0202 	orr.w	r2, r2, #2
 8001578:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80015b4:	697a      	ldr	r2, [r7, #20]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	3308      	adds	r3, #8
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e004      	b.n	80015ca <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	3314      	adds	r3, #20
 80015c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	461a      	mov	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	371c      	adds	r7, #28
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	795b      	ldrb	r3, [r3, #5]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_DAC_ConfigChannel+0x1c>
 80015f8:	2302      	movs	r3, #2
 80015fa:	e194      	b.n	8001926 <HAL_DAC_ConfigChannel+0x346>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2201      	movs	r2, #1
 8001600:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2202      	movs	r2, #2
 8001606:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b04      	cmp	r3, #4
 800160e:	d174      	bne.n	80016fa <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d137      	bne.n	8001686 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001616:	f7fe fe63 	bl	80002e0 <HAL_GetTick>
 800161a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800161c:	e011      	b.n	8001642 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800161e:	f7fe fe5f 	bl	80002e0 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d90a      	bls.n	8001642 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f043 0208 	orr.w	r2, r3, #8
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2203      	movs	r2, #3
 800163c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e171      	b.n	8001926 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1e6      	bne.n	800161e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8001650:	2001      	movs	r0, #1
 8001652:	f7fe fe51 	bl	80002f8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
 8001660:	e01e      	b.n	80016a0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001662:	f7fe fe3d 	bl	80002e0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d90a      	bls.n	8001686 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f043 0208 	orr.w	r2, r3, #8
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2203      	movs	r2, #3
 8001680:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e14f      	b.n	8001926 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168c:	2b00      	cmp	r3, #0
 800168e:	dbe8      	blt.n	8001662 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001690:	2001      	movs	r0, #1
 8001692:	f7fe fe31 	bl	80002f8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800169e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	ea02 0103 	and.w	r1, r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	409a      	lsls	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	430a      	orrs	r2, r1
 80016cc:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	21ff      	movs	r1, #255	; 0xff
 80016dc:	fa01 f303 	lsl.w	r3, r1, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	ea02 0103 	and.w	r1, r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	409a      	lsls	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d11d      	bne.n	800173e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800171a:	4013      	ands	r3, r2
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f003 0310 	and.w	r3, r3, #16
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001732:	4313      	orrs	r3, r2
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2207      	movs	r2, #7
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	4013      	ands	r3, r2
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8001766:	2300      	movs	r3, #0
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	e011      	b.n	8001790 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	e008      	b.n	8001790 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001786:	2301      	movs	r3, #1
 8001788:	623b      	str	r3, [r7, #32]
 800178a:	e001      	b.n	8001790 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	6a3a      	ldr	r2, [r7, #32]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017b2:	4013      	ands	r3, r2
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	791b      	ldrb	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_DAC_ConfigChannel+0x1e4>
 80017be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c2:	e000      	b.n	80017c6 <HAL_DAC_ConfigChannel+0x1e6>
 80017c4:	2300      	movs	r3, #0
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	4013      	ands	r3, r2
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	795b      	ldrb	r3, [r3, #5]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d102      	bne.n	80017f0 <HAL_DAC_ConfigChannel+0x210>
 80017ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ee:	e000      	b.n	80017f2 <HAL_DAC_ConfigChannel+0x212>
 80017f0:	2300      	movs	r3, #0
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	d114      	bne.n	8001832 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8001808:	f001 ffea 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 800180c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	4a47      	ldr	r2, [pc, #284]	; (8001930 <HAL_DAC_ConfigChannel+0x350>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d904      	bls.n	8001820 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	e00d      	b.n	800183c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <HAL_DAC_ConfigChannel+0x354>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d909      	bls.n	800183c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	e004      	b.n	800183c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001838:	4313      	orrs	r3, r2
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	4313      	orrs	r3, r2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188e:	4013      	ands	r3, r2
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a6:	4313      	orrs	r3, r2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	22c0      	movs	r2, #192	; 0xc0
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43da      	mvns	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	400a      	ands	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	089b      	lsrs	r3, r3, #2
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80018fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	ea02 0103 	and.w	r1, r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	409a      	lsls	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2201      	movs	r2, #1
 800191c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	09896800 	.word	0x09896800
 8001934:	04c4b400 	.word	0x04c4b400

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001946:	e15a      	b.n	8001bfe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	4013      	ands	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 814c 	beq.w	8001bf8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b02      	cmp	r3, #2
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x38>
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b12      	cmp	r3, #18
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	6939      	ldr	r1, [r7, #16]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d00b      	beq.n	8001a0c <HAL_GPIO_Init+0xd4>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d007      	beq.n	8001a0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a00:	2b11      	cmp	r3, #17
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d130      	bne.n	8001a6e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a42:	2201      	movs	r2, #1
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	091b      	lsrs	r3, r3, #4
 8001a58:	f003 0201 	and.w	r2, r3, #1
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 80a6 	beq.w	8001bf8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aac:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	4a5a      	ldr	r2, [pc, #360]	; (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ab8:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x2e4>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ac4:	4a56      	ldr	r2, [pc, #344]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	089b      	lsrs	r3, r3, #2
 8001aca:	3302      	adds	r3, #2
 8001acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aee:	d01f      	beq.n	8001b30 <HAL_GPIO_Init+0x1f8>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_GPIO_Init+0x2ec>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d019      	beq.n	8001b2c <HAL_GPIO_Init+0x1f4>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a4b      	ldr	r2, [pc, #300]	; (8001c28 <HAL_GPIO_Init+0x2f0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d013      	beq.n	8001b28 <HAL_GPIO_Init+0x1f0>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a4a      	ldr	r2, [pc, #296]	; (8001c2c <HAL_GPIO_Init+0x2f4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00d      	beq.n	8001b24 <HAL_GPIO_Init+0x1ec>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_GPIO_Init+0x2f8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d007      	beq.n	8001b20 <HAL_GPIO_Init+0x1e8>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2fc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d101      	bne.n	8001b1c <HAL_GPIO_Init+0x1e4>
 8001b18:	2305      	movs	r3, #5
 8001b1a:	e00a      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b1c:	2306      	movs	r3, #6
 8001b1e:	e008      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b20:	2304      	movs	r3, #4
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e004      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e002      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_GPIO_Init+0x1fa>
 8001b30:	2300      	movs	r3, #0
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	f002 0203 	and.w	r2, r2, #3
 8001b38:	0092      	lsls	r2, r2, #2
 8001b3a:	4093      	lsls	r3, r2
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b42:	4937      	ldr	r1, [pc, #220]	; (8001c20 <HAL_GPIO_Init+0x2e8>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b50:	4b39      	ldr	r3, [pc, #228]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b74:	4a30      	ldr	r2, [pc, #192]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b7a:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4013      	ands	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b9e:	4a26      	ldr	r2, [pc, #152]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bf2:	4a11      	ldr	r2, [pc, #68]	; (8001c38 <HAL_GPIO_Init+0x300>)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f47f ae9d 	bne.w	8001948 <HAL_GPIO_Init+0x10>
  }
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	48000400 	.word	0x48000400
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	48000c00 	.word	0x48000c00
 8001c30:	48001000 	.word	0x48001000
 8001c34:	48001400 	.word	0x48001400
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c4c:	787b      	ldrb	r3, [r7, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c58:	e002      	b.n	8001c60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c5a:	887a      	ldrh	r2, [r7, #2]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8c:	887a      	ldrh	r2, [r7, #2]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	619a      	str	r2, [r3, #24]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e081      	b.n	8001db4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d106      	bne.n	8001cca <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f005 fca3 	bl	8007610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2224      	movs	r2, #36	; 0x24
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d107      	bne.n	8001d18 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	e006      	b.n	8001d26 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d24:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d104      	bne.n	8001d38 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	ea42 0103 	orr.w	r1, r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	021a      	lsls	r2, r3, #8
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69d9      	ldr	r1, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b20      	cmp	r3, #32
 8001dd0:	d138      	bne.n	8001e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e032      	b.n	8001e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2224      	movs	r2, #36	; 0x24
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0201 	bic.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6819      	ldr	r1, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 0201 	orr.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d139      	bne.n	8001edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e033      	b.n	8001ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2224      	movs	r2, #36	; 0x24
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e000      	b.n	8001ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001edc:	2302      	movs	r3, #2
  }
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eec:	b08b      	sub	sp, #44	; 0x2c
 8001eee:	af06      	add	r7, sp, #24
 8001ef0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ad      	b.n	8002058 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d106      	bne.n	8001f16 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f005 febf 	bl	8007c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2203      	movs	r2, #3
 8001f1a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f002 fbde 	bl	80046e4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73fb      	strb	r3, [r7, #15]
 8001f2c:	e035      	b.n	8001f9a <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	015b      	lsls	r3, r3, #5
 8001f34:	4413      	add	r3, r2
 8001f36:	3329      	adds	r3, #41	; 0x29
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	015b      	lsls	r3, r3, #5
 8001f42:	4413      	add	r3, r2
 8001f44:	3328      	adds	r3, #40	; 0x28
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	b291      	uxth	r1, r2
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	015b      	lsls	r3, r3, #5
 8001f54:	4413      	add	r3, r2
 8001f56:	3336      	adds	r3, #54	; 0x36
 8001f58:	460a      	mov	r2, r1
 8001f5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	4413      	add	r3, r2
 8001f64:	332b      	adds	r3, #43	; 0x2b
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	4413      	add	r3, r2
 8001f72:	3338      	adds	r3, #56	; 0x38
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	015b      	lsls	r3, r3, #5
 8001f7e:	4413      	add	r3, r2
 8001f80:	333c      	adds	r3, #60	; 0x3c
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	4413      	add	r3, r2
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
 8001f96:	3301      	adds	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d3c4      	bcc.n	8001f2e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
 8001fa8:	e031      	b.n	800200e <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	015b      	lsls	r3, r3, #5
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	015b      	lsls	r3, r3, #5
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	015b      	lsls	r3, r3, #5
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	015b      	lsls	r3, r3, #5
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	330a      	adds	r3, #10
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	4413      	add	r3, r2
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3c8      	bcc.n	8001faa <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	687e      	ldr	r6, [r7, #4]
 8002020:	466d      	mov	r5, sp
 8002022:	f106 0410 	add.w	r4, r6, #16
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	602b      	str	r3, [r5, #0]
 800202e:	1d33      	adds	r3, r6, #4
 8002030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f002 fb73 	bl	800471e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fe40 	bl	8002cd6 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002060 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_PCD_Start+0x16>
 8002072:	2302      	movs	r3, #2
 8002074:	e012      	b.n	800209c <HAL_PCD_Start+0x3c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fb98 	bl	80057b8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f002 fb11 	bl	80046b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 fb98 	bl	80057e6 <USB_ReadInterrupts>
 80020b6:	4603      	mov	r3, r0
 80020b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c0:	d102      	bne.n	80020c8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fb3e 	bl	8002744 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f003 fb8a 	bl	80057e6 <USB_ReadInterrupts>
 80020d2:	4603      	mov	r3, r0
 80020d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020dc:	d112      	bne.n	8002104 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f0:	b292      	uxth	r2, r2
 80020f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f005 fe65 	bl	8007dc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80020fc:	2100      	movs	r1, #0
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f929 	bl	8002356 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fb6c 	bl	80057e6 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002118:	d10b      	bne.n	8002132 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002122:	b29a      	uxth	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800212c:	b292      	uxth	r2, r2
 800212e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fb55 	bl	80057e6 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002146:	d10b      	bne.n	8002160 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800215a:	b292      	uxth	r2, r2
 800215c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f003 fb3e 	bl	80057e6 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002174:	d133      	bne.n	80021de <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800217e:	b29a      	uxth	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0204 	bic.w	r2, r2, #4
 8002188:	b292      	uxth	r2, r2
 800218a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002196:	b29a      	uxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0208 	bic.w	r2, r2, #8
 80021a0:	b292      	uxth	r2, r2
 80021a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d107      	bne.n	80021c0 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021b8:	2100      	movs	r1, #0
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f005 fff4 	bl	80081a8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f005 fe39 	bl	8007e38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021d8:	b292      	uxth	r2, r2
 80021da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f003 faff 	bl	80057e6 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f2:	d131      	bne.n	8002258 <HAL_PCD_IRQHandler+0x1b4>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0208 	orr.w	r2, r2, #8
 8002206:	b292      	uxth	r2, r2
 8002208:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002214:	b29a      	uxth	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221e:	b292      	uxth	r2, r2
 8002220:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0204 	orr.w	r2, r2, #4
 8002236:	b292      	uxth	r2, r2
 8002238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f003 fad0 	bl	80057e6 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002250:	d002      	beq.n	8002258 <HAL_PCD_IRQHandler+0x1b4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f005 fdd6 	bl	8007e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f003 fac2 	bl	80057e6 <USB_ReadInterrupts>
 8002262:	4603      	mov	r3, r0
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d13f      	bne.n	80022ec <HAL_PCD_IRQHandler+0x248>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002274:	b29a      	uxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800227e:	b292      	uxth	r2, r2
 8002280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800228a:	2b00      	cmp	r3, #0
 800228c:	d12b      	bne.n	80022e6 <HAL_PCD_IRQHandler+0x242>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0204 	orr.w	r2, r2, #4
 80022a0:	b292      	uxth	r2, r2
 80022a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0208 	orr.w	r2, r2, #8
 80022b8:	b292      	uxth	r2, r2
 80022ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80022dc:	2101      	movs	r1, #1
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f005 ff62 	bl	80081a8 <HAL_PCDEx_LPM_Callback>
 80022e4:	e002      	b.n	80022ec <HAL_PCD_IRQHandler+0x248>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f005 fd8c 	bl	8007e04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 fa78 	bl	80057e6 <USB_ReadInterrupts>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002300:	d10e      	bne.n	8002320 <HAL_PCD_IRQHandler+0x27c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800230a:	b29a      	uxth	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002314:	b292      	uxth	r2, r2
 8002316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f005 fd45 	bl	8007daa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fa5e 	bl	80057e6 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002334:	d10b      	bne.n	800234e <HAL_PCD_IRQHandler+0x2aa>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002368:	2b01      	cmp	r3, #1
 800236a:	d101      	bne.n	8002370 <HAL_PCD_SetAddress+0x1a>
 800236c:	2302      	movs	r3, #2
 800236e:	e013      	b.n	8002398 <HAL_PCD_SetAddress+0x42>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	78fa      	ldrb	r2, [r7, #3]
 800237c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f003 fa01 	bl	8005790 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	4608      	mov	r0, r1
 80023aa:	4611      	mov	r1, r2
 80023ac:	461a      	mov	r2, r3
 80023ae:	4603      	mov	r3, r0
 80023b0:	70fb      	strb	r3, [r7, #3]
 80023b2:	460b      	mov	r3, r1
 80023b4:	803b      	strh	r3, [r7, #0]
 80023b6:	4613      	mov	r3, r2
 80023b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	da0b      	bge.n	80023de <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	015b      	lsls	r3, r3, #5
 80023ce:	3328      	adds	r3, #40	; 0x28
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	705a      	strb	r2, [r3, #1]
 80023dc:	e00b      	b.n	80023f6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023de:	78fb      	ldrb	r3, [r7, #3]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002402:	883a      	ldrh	r2, [r7, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	78ba      	ldrb	r2, [r7, #2]
 800240c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002420:	78bb      	ldrb	r3, [r7, #2]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d102      	bne.n	800242c <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_PCD_EP_Open+0x9a>
 8002436:	2302      	movs	r3, #2
 8002438:	e00e      	b.n	8002458 <HAL_PCD_EP_Open+0xb8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68f9      	ldr	r1, [r7, #12]
 8002448:	4618      	mov	r0, r3
 800244a:	f002 f98d 	bl	8004768 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002456:	7afb      	ldrb	r3, [r7, #11]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800246c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da0b      	bge.n	800248c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	3328      	adds	r3, #40	; 0x28
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	705a      	strb	r2, [r3, #1]
 800248a:	e00b      	b.n	80024a4 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	015b      	lsls	r3, r3, #5
 8002494:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_PCD_EP_Close+0x5e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e00e      	b.n	80024dc <HAL_PCD_EP_Close+0x7c>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68f9      	ldr	r1, [r7, #12]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f002 fc3b 	bl	8004d48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	460b      	mov	r3, r1
 80024f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f4:	7afb      	ldrb	r3, [r7, #11]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2200      	movs	r2, #0
 8002516:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2200      	movs	r2, #0
 800251c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800251e:	7afb      	ldrb	r3, [r7, #11]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	b2da      	uxtb	r2, r3
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800252a:	7afb      	ldrb	r3, [r7, #11]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6979      	ldr	r1, [r7, #20]
 800253a:	4618      	mov	r0, r3
 800253c:	f002 fd9a 	bl	8005074 <USB_EPStartXfer>
 8002540:	e005      	b.n	800254e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6979      	ldr	r1, [r7, #20]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fd93 	bl	8005074 <USB_EPStartXfer>
  }

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	330a      	adds	r3, #10
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	4413      	add	r3, r2
 8002572:	3304      	adds	r3, #4
 8002574:	681b      	ldr	r3, [r3, #0]
}
 8002576:	4618      	mov	r0, r3
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	460b      	mov	r3, r1
 8002590:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	015b      	lsls	r3, r3, #5
 800259a:	3328      	adds	r3, #40	; 0x28
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2200      	movs	r2, #0
 80025b2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2201      	movs	r2, #1
 80025b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025c6:	7afb      	ldrb	r3, [r7, #11]
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6979      	ldr	r1, [r7, #20]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fd4c 	bl	8005074 <USB_EPStartXfer>
 80025dc:	e005      	b.n	80025ea <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6979      	ldr	r1, [r7, #20]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f002 fd45 	bl	8005074 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	f003 0207 	and.w	r2, r3, #7
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d901      	bls.n	8002612 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e046      	b.n	80026a0 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da0b      	bge.n	8002632 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	3328      	adds	r3, #40	; 0x28
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	705a      	strb	r2, [r3, #1]
 8002630:	e009      	b.n	8002646 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	015b      	lsls	r3, r3, #5
 8002636:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800264c:	78fb      	ldrb	r3, [r7, #3]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_PCD_EP_SetStall+0x72>
 8002662:	2302      	movs	r3, #2
 8002664:	e01c      	b.n	80026a0 <HAL_PCD_EP_SetStall+0xac>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68f9      	ldr	r1, [r7, #12]
 8002674:	4618      	mov	r0, r3
 8002676:	f002 ffb5 	bl	80055e4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800267a:	78fb      	ldrb	r3, [r7, #3]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f003 f8b8 	bl	8005806 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	f003 020f 	and.w	r2, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d901      	bls.n	80026c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e03a      	b.n	800273c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	da0b      	bge.n	80026e6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	3328      	adds	r3, #40	; 0x28
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	705a      	strb	r2, [r3, #1]
 80026e4:	e00b      	b.n	80026fe <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026e6:	78fb      	ldrb	r3, [r7, #3]
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	015b      	lsls	r3, r3, #5
 80026ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	78fb      	ldrb	r3, [r7, #3]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_PCD_EP_ClrStall+0x76>
 800271a:	2302      	movs	r3, #2
 800271c:	e00e      	b.n	800273c <HAL_PCD_EP_ClrStall+0x94>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68f9      	ldr	r1, [r7, #12]
 800272c:	4618      	mov	r0, r3
 800272e:	f002 ff9b 	bl	8005668 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800274c:	e274      	b.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002756:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002758:	8afb      	ldrh	r3, [r7, #22]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8002762:	7d7b      	ldrb	r3, [r7, #21]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f040 813c 	bne.w	80029e2 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800276a:	8afb      	ldrh	r3, [r7, #22]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d14f      	bne.n	8002814 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002784:	b29c      	uxth	r4, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800278e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002792:	b29b      	uxth	r3, r3
 8002794:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3328      	adds	r3, #40	; 0x28
 800279a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	695a      	ldr	r2, [r3, #20]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	441a      	add	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027d2:	2100      	movs	r1, #0
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f005 fad1 	bl	8007d7c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 8228 	beq.w	8002c38 <PCD_EP_ISR_Handler+0x4f4>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 8223 	bne.w	8002c38 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	b292      	uxth	r2, r2
 8002806:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002812:	e211      	b.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800281a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002824:	8a7b      	ldrh	r3, [r7, #18]
 8002826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800282a:	2b00      	cmp	r3, #0
 800282c:	d031      	beq.n	8002892 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6818      	ldr	r0, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002868:	b29b      	uxth	r3, r3
 800286a:	f003 f819 	bl	80058a0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29a      	uxth	r2, r3
 8002876:	f640 738f 	movw	r3, #3983	; 0xf8f
 800287a:	4013      	ands	r3, r2
 800287c:	b29c      	uxth	r4, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002886:	b292      	uxth	r2, r2
 8002888:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f005 fa4c 	bl	8007d28 <HAL_PCD_SetupStageCallback>
 8002890:	e1d2      	b.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002892:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002896:	2b00      	cmp	r3, #0
 8002898:	f280 81ce 	bge.w	8002c38 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028a8:	4013      	ands	r3, r2
 80028aa:	b29c      	uxth	r4, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80028b4:	b292      	uxth	r2, r2
 80028b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4413      	add	r3, r2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d019      	beq.n	800291c <PCD_EP_ISR_Handler+0x1d8>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d015      	beq.n	800291c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6959      	ldr	r1, [r3, #20]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002900:	b29b      	uxth	r3, r3
 8002902:	f002 ffcd 	bl	80058a0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002914:	2100      	movs	r1, #0
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fa18 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461c      	mov	r4, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292a:	b29b      	uxth	r3, r3
 800292c:	441c      	add	r4, r3
 800292e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8002932:	461c      	mov	r4, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10e      	bne.n	800295a <PCD_EP_ISR_Handler+0x216>
 800293c:	8823      	ldrh	r3, [r4, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002944:	b29b      	uxth	r3, r3
 8002946:	8023      	strh	r3, [r4, #0]
 8002948:	8823      	ldrh	r3, [r4, #0]
 800294a:	b29b      	uxth	r3, r3
 800294c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002954:	b29b      	uxth	r3, r3
 8002956:	8023      	strh	r3, [r4, #0]
 8002958:	e02d      	b.n	80029b6 <PCD_EP_ISR_Handler+0x272>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b3e      	cmp	r3, #62	; 0x3e
 8002960:	d812      	bhi.n	8002988 <PCD_EP_ISR_Handler+0x244>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	085b      	lsrs	r3, r3, #1
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <PCD_EP_ISR_Handler+0x238>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	3301      	adds	r3, #1
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	b29b      	uxth	r3, r3
 8002980:	029b      	lsls	r3, r3, #10
 8002982:	b29b      	uxth	r3, r3
 8002984:	8023      	strh	r3, [r4, #0]
 8002986:	e016      	b.n	80029b6 <PCD_EP_ISR_Handler+0x272>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <PCD_EP_ISR_Handler+0x25e>
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	3b01      	subs	r3, #1
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c6:	b29c      	uxth	r4, r3
 80029c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80029cc:	b29c      	uxth	r4, r3
 80029ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80029d2:	b29c      	uxth	r4, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <PCD_EP_ISR_Handler+0x510>)
 80029da:	4323      	orrs	r3, r4
 80029dc:	b29b      	uxth	r3, r3
 80029de:	8013      	strh	r3, [r2, #0]
 80029e0:	e12a      	b.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	7d7b      	ldrb	r3, [r7, #21]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f280 80cb 	bge.w	8002b92 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	7d7b      	ldrb	r3, [r7, #21]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a10:	4013      	ands	r3, r2
 8002a12:	b29c      	uxth	r4, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	7d7b      	ldrb	r3, [r7, #21]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002a24:	b292      	uxth	r2, r2
 8002a26:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a28:	7d7b      	ldrb	r3, [r7, #21]
 8002a2a:	015b      	lsls	r3, r3, #5
 8002a2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	7b1b      	ldrb	r3, [r3, #12]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d11f      	bne.n	8002a7e <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	6812      	ldr	r2, [r2, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a62:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002a64:	8bfb      	ldrh	r3, [r7, #30]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d06e      	beq.n	8002b48 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6959      	ldr	r1, [r3, #20]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	88da      	ldrh	r2, [r3, #6]
 8002a76:	8bfb      	ldrh	r3, [r7, #30]
 8002a78:	f002 ff12 	bl	80058a0 <USB_ReadPMA>
 8002a7c:	e064      	b.n	8002b48 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d01f      	beq.n	8002ad8 <PCD_EP_ISR_Handler+0x394>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002abc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002abe:	8bfb      	ldrh	r3, [r7, #30]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d028      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6818      	ldr	r0, [r3, #0]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6959      	ldr	r1, [r3, #20]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	891a      	ldrh	r2, [r3, #8]
 8002ad0:	8bfb      	ldrh	r3, [r7, #30]
 8002ad2:	f002 fee5 	bl	80058a0 <USB_ReadPMA>
 8002ad6:	e01e      	b.n	8002b16 <PCD_EP_ISR_Handler+0x3d2>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	4413      	add	r3, r2
 8002af2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002afc:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002afe:	8bfb      	ldrh	r3, [r7, #30]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <PCD_EP_ISR_Handler+0x3d2>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6959      	ldr	r1, [r3, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	895a      	ldrh	r2, [r3, #10]
 8002b10:	8bfb      	ldrh	r3, [r7, #30]
 8002b12:	f002 fec5 	bl	80058a0 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b30:	b29c      	uxth	r4, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	4b45      	ldr	r3, [pc, #276]	; (8002c58 <PCD_EP_ISR_Handler+0x514>)
 8002b42:	4323      	orrs	r3, r4
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	8bfb      	ldrh	r3, [r7, #30]
 8002b4e:	441a      	add	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	8bfb      	ldrh	r3, [r7, #30]
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d004      	beq.n	8002b72 <PCD_EP_ISR_Handler+0x42e>
 8002b68:	8bfa      	ldrh	r2, [r7, #30]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d206      	bcs.n	8002b80 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f005 f8e7 	bl	8007d4c <HAL_PCD_DataOutStageCallback>
 8002b7e:	e008      	b.n	8002b92 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	7819      	ldrb	r1, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fca9 	bl	80024e4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002b92:	8a7b      	ldrh	r3, [r7, #18]
 8002b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d04d      	beq.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002b9c:	7d7b      	ldrb	r3, [r7, #21]
 8002b9e:	015b      	lsls	r3, r3, #5
 8002ba0:	3328      	adds	r3, #40	; 0x28
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	7d7b      	ldrb	r3, [r7, #21]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	7d7b      	ldrb	r3, [r7, #21]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002bd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f005 f8ac 	bl	8007d7c <HAL_PCD_DataInStageCallback>
 8002c24:	e008      	b.n	8002c38 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	7819      	ldrb	r1, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff fca5 	bl	8002582 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f6ff ad82 	blt.w	800274e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3724      	adds	r7, #36	; 0x24
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	ffff8080 	.word	0xffff8080
 8002c58:	ffff80c0 	.word	0xffff80c0

08002c5c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	817b      	strh	r3, [r7, #10]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7a:	897b      	ldrh	r3, [r7, #10]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	015b      	lsls	r3, r3, #5
 8002c82:	3328      	adds	r3, #40	; 0x28
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e006      	b.n	8002c9a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c8c:	897b      	ldrh	r3, [r7, #10]
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c9a:	893b      	ldrh	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	80da      	strh	r2, [r3, #6]
 8002cae:	e00b      	b.n	8002cc8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	f043 0301 	orr.w	r3, r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d141      	bne.n	8002dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d131      	bne.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4e:	4a46      	ldr	r2, [pc, #280]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d58:	4b43      	ldr	r3, [pc, #268]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d60:	4a41      	ldr	r2, [pc, #260]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d68:	4b40      	ldr	r3, [pc, #256]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2232      	movs	r2, #50	; 0x32
 8002d6e:	fb02 f303 	mul.w	r3, r2, r3
 8002d72:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	0c9b      	lsrs	r3, r3, #18
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d7e:	e002      	b.n	8002d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d86:	4b38      	ldr	r3, [pc, #224]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d102      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f2      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d9a:	4b33      	ldr	r3, [pc, #204]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002da6:	d158      	bne.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e057      	b.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dac:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002dbc:	e04d      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc4:	d141      	bne.n	8002e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc6:	4b28      	ldr	r3, [pc, #160]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd2:	d131      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd4:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dda:	4a23      	ldr	r2, [pc, #140]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002de4:	4b20      	ldr	r3, [pc, #128]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002df4:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2232      	movs	r2, #50	; 0x32
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	4a1c      	ldr	r2, [pc, #112]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e00:	fba2 2303 	umull	r2, r3, r2, r3
 8002e04:	0c9b      	lsrs	r3, r3, #18
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e0a:	e002      	b.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d102      	bne.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f2      	bne.n	8002e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e26:	4b10      	ldr	r3, [pc, #64]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	695b      	ldr	r3, [r3, #20]
 8002e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e32:	d112      	bne.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e011      	b.n	8002e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e48:	e007      	b.n	8002e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e52:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3714      	adds	r7, #20
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	20000118 	.word	0x20000118
 8002e70:	431bde83 	.word	0x431bde83

08002e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e308      	b.n	8003498 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d075      	beq.n	8002f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4ba3      	ldr	r3, [pc, #652]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b0c      	cmp	r3, #12
 8002eaa:	d102      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3e>
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d002      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x44>
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d10b      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	4b99      	ldr	r3, [pc, #612]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d05b      	beq.n	8002f7c <HAL_RCC_OscConfig+0x108>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d157      	bne.n	8002f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e2e3      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x74>
 8002eda:	4b91      	ldr	r3, [pc, #580]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a90      	ldr	r2, [pc, #576]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e01d      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x98>
 8002ef2:	4b8b      	ldr	r3, [pc, #556]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a8a      	ldr	r2, [pc, #552]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002efc:	6013      	str	r3, [r2, #0]
 8002efe:	4b88      	ldr	r3, [pc, #544]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a87      	ldr	r2, [pc, #540]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6013      	str	r3, [r2, #0]
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0xb0>
 8002f0c:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a83      	ldr	r2, [pc, #524]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a80      	ldr	r2, [pc, #512]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d013      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2c:	f7fd f9d8 	bl	80002e0 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f34:	f7fd f9d4 	bl	80002e0 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b64      	cmp	r3, #100	; 0x64
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e2a8      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f46:	4b76      	ldr	r3, [pc, #472]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0xc0>
 8002f52:	e014      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fd f9c4 	bl	80002e0 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fd f9c0 	bl	80002e0 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e294      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1f0      	bne.n	8002f5c <HAL_RCC_OscConfig+0xe8>
 8002f7a:	e000      	b.n	8002f7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d075      	beq.n	8003076 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f8a:	4b65      	ldr	r3, [pc, #404]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f94:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b0c      	cmp	r3, #12
 8002fa2:	d102      	bne.n	8002faa <HAL_RCC_OscConfig+0x136>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d002      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x13c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d11f      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x154>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e267      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc8:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	4952      	ldr	r1, [pc, #328]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fdc:	4b51      	ldr	r3, [pc, #324]	; (8003124 <HAL_RCC_OscConfig+0x2b0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd f931 	bl	8000248 <HAL_InitTick>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d043      	beq.n	8003074 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e253      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ff8:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a48      	ldr	r2, [pc, #288]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fd f96c 	bl	80002e0 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300c:	f7fd f968 	bl	80002e0 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e23c      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	061b      	lsls	r3, r3, #24
 8003038:	4939      	ldr	r1, [pc, #228]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 800303a:	4313      	orrs	r3, r2
 800303c:	604b      	str	r3, [r1, #4]
 800303e:	e01a      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003040:	4b37      	ldr	r3, [pc, #220]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a36      	ldr	r2, [pc, #216]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fd f948 	bl	80002e0 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fd f944 	bl	80002e0 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e218      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e0>
 8003072:	e000      	b.n	8003076 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003074:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d03c      	beq.n	80030fc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01c      	beq.n	80030c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 800308c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003090:	4a23      	ldr	r2, [pc, #140]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309a:	f7fd f921 	bl	80002e0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a2:	f7fd f91d 	bl	80002e0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1f1      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 80030b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ef      	beq.n	80030a2 <HAL_RCC_OscConfig+0x22e>
 80030c2:	e01b      	b.n	80030fc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 80030c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ca:	4a15      	ldr	r2, [pc, #84]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d4:	f7fd f904 	bl	80002e0 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030dc:	f7fd f900 	bl	80002e0 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e1d4      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 80030f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1ef      	bne.n	80030dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80ab 	beq.w	8003260 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800310e:	4b04      	ldr	r3, [pc, #16]	; (8003120 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_RCC_OscConfig+0x2b4>
 800311a:	2301      	movs	r3, #1
 800311c:	e005      	b.n	800312a <HAL_RCC_OscConfig+0x2b6>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	20000000 	.word	0x20000000
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	4baf      	ldr	r3, [pc, #700]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003132:	4aae      	ldr	r2, [pc, #696]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003138:	6593      	str	r3, [r2, #88]	; 0x58
 800313a:	4bac      	ldr	r3, [pc, #688]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800313c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003146:	2301      	movs	r3, #1
 8003148:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	4ba9      	ldr	r3, [pc, #676]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d118      	bne.n	8003188 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003156:	4ba6      	ldr	r3, [pc, #664]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4aa5      	ldr	r2, [pc, #660]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 800315c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003162:	f7fd f8bd 	bl	80002e0 <HAL_GetTick>
 8003166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003168:	e008      	b.n	800317c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316a:	f7fd f8b9 	bl	80002e0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d901      	bls.n	800317c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e18d      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317c:	4b9c      	ldr	r3, [pc, #624]	; (80033f0 <HAL_RCC_OscConfig+0x57c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0f0      	beq.n	800316a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d108      	bne.n	80031a2 <HAL_RCC_OscConfig+0x32e>
 8003190:	4b96      	ldr	r3, [pc, #600]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003196:	4a95      	ldr	r2, [pc, #596]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a0:	e024      	b.n	80031ec <HAL_RCC_OscConfig+0x378>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d110      	bne.n	80031cc <HAL_RCC_OscConfig+0x358>
 80031aa:	4b90      	ldr	r3, [pc, #576]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b0:	4a8e      	ldr	r2, [pc, #568]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ba:	4b8c      	ldr	r3, [pc, #560]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	4a8a      	ldr	r2, [pc, #552]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031c2:	f043 0301 	orr.w	r3, r3, #1
 80031c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ca:	e00f      	b.n	80031ec <HAL_RCC_OscConfig+0x378>
 80031cc:	4b87      	ldr	r3, [pc, #540]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	4a86      	ldr	r2, [pc, #536]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031dc:	4b83      	ldr	r3, [pc, #524]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a82      	ldr	r2, [pc, #520]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d016      	beq.n	8003222 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f4:	f7fd f874 	bl	80002e0 <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031fc:	f7fd f870 	bl	80002e0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	; 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e142      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003212:	4b76      	ldr	r3, [pc, #472]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ed      	beq.n	80031fc <HAL_RCC_OscConfig+0x388>
 8003220:	e015      	b.n	800324e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003222:	f7fd f85d 	bl	80002e0 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fd f859 	bl	80002e0 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e12b      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ed      	bne.n	800322a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800324e:	7ffb      	ldrb	r3, [r7, #31]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003254:	4b65      	ldr	r3, [pc, #404]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003258:	4a64      	ldr	r2, [pc, #400]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800325e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0320 	and.w	r3, r3, #32
 8003268:	2b00      	cmp	r3, #0
 800326a:	d03c      	beq.n	80032e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01c      	beq.n	80032ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003274:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003276:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327a:	4a5c      	ldr	r2, [pc, #368]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fd f82c 	bl	80002e0 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800328c:	f7fd f828 	bl	80002e0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0fc      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329e:	4b53      	ldr	r3, [pc, #332]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0ef      	beq.n	800328c <HAL_RCC_OscConfig+0x418>
 80032ac:	e01b      	b.n	80032e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032ae:	4b4f      	ldr	r3, [pc, #316]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b4:	4a4d      	ldr	r2, [pc, #308]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fd f80f 	bl	80002e0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032c6:	f7fd f80b 	bl	80002e0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0df      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d8:	4b44      	ldr	r3, [pc, #272]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1ef      	bne.n	80032c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80d3 	beq.w	8003496 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032f0:	4b3e      	ldr	r3, [pc, #248]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f000 808d 	beq.w	8003418 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d15a      	bne.n	80033bc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a38      	ldr	r2, [pc, #224]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800330c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fc ffe5 	bl	80002e0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331a:	f7fc ffe1 	bl	80002e0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0b5      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332c:	4b2f      	ldr	r3, [pc, #188]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1f0      	bne.n	800331a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003338:	4b2c      	ldr	r3, [pc, #176]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_RCC_OscConfig+0x580>)
 800333e:	4013      	ands	r3, r2
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6a11      	ldr	r1, [r2, #32]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003348:	3a01      	subs	r2, #1
 800334a:	0112      	lsls	r2, r2, #4
 800334c:	4311      	orrs	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003352:	0212      	lsls	r2, r2, #8
 8003354:	4311      	orrs	r1, r2
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800335a:	0852      	lsrs	r2, r2, #1
 800335c:	3a01      	subs	r2, #1
 800335e:	0552      	lsls	r2, r2, #21
 8003360:	4311      	orrs	r1, r2
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003366:	0852      	lsrs	r2, r2, #1
 8003368:	3a01      	subs	r2, #1
 800336a:	0652      	lsls	r2, r2, #25
 800336c:	4311      	orrs	r1, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003372:	06d2      	lsls	r2, r2, #27
 8003374:	430a      	orrs	r2, r1
 8003376:	491d      	ldr	r1, [pc, #116]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003378:	4313      	orrs	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a1a      	ldr	r2, [pc, #104]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 8003382:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003386:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003388:	4b18      	ldr	r3, [pc, #96]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a17      	ldr	r2, [pc, #92]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 800338e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003392:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fc ffa4 	bl	80002e0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fc ffa0 	bl	80002e0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e074      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ae:	4b0f      	ldr	r3, [pc, #60]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x528>
 80033ba:	e06c      	b.n	8003496 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0a      	ldr	r2, [pc, #40]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033c8:	4b08      	ldr	r3, [pc, #32]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033ce:	f023 0303 	bic.w	r3, r3, #3
 80033d2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4a04      	ldr	r2, [pc, #16]	; (80033ec <HAL_RCC_OscConfig+0x578>)
 80033da:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fc ff7c 	bl	80002e0 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ea:	e00e      	b.n	800340a <HAL_RCC_OscConfig+0x596>
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40007000 	.word	0x40007000
 80033f4:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fc ff72 	bl	80002e0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e046      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_RCC_OscConfig+0x62c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1f0      	bne.n	80033f8 <HAL_RCC_OscConfig+0x584>
 8003416:	e03e      	b.n	8003496 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e039      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <HAL_RCC_OscConfig+0x62c>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	429a      	cmp	r2, r3
 8003436:	d12c      	bne.n	8003492 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	3b01      	subs	r3, #1
 8003444:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d123      	bne.n	8003492 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d11b      	bne.n	8003492 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003466:	429a      	cmp	r2, r3
 8003468:	d113      	bne.n	8003492 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	085b      	lsrs	r3, r3, #1
 8003476:	3b01      	subs	r3, #1
 8003478:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800347a:	429a      	cmp	r2, r3
 800347c:	d109      	bne.n	8003492 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3720      	adds	r7, #32
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40021000 	.word	0x40021000

080034a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e11e      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034bc:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d910      	bls.n	80034ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b8e      	ldr	r3, [pc, #568]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 020f 	bic.w	r2, r3, #15
 80034d2:	498c      	ldr	r1, [pc, #560]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b8a      	ldr	r3, [pc, #552]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e106      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d073      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d129      	bne.n	8003554 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003500:	4b81      	ldr	r3, [pc, #516]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0f4      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003510:	f000 f972 	bl	80037f8 <RCC_GetSysClockFreqFromPLLSource>
 8003514:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4a7c      	ldr	r2, [pc, #496]	; (800370c <HAL_RCC_ClockConfig+0x268>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d93f      	bls.n	800359e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800351e:	4b7a      	ldr	r3, [pc, #488]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003532:	2b00      	cmp	r3, #0
 8003534:	d033      	beq.n	800359e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800353a:	2b00      	cmp	r3, #0
 800353c:	d12f      	bne.n	800359e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800353e:	4b72      	ldr	r3, [pc, #456]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003546:	4a70      	ldr	r2, [pc, #448]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800354c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	617b      	str	r3, [r7, #20]
 8003552:	e024      	b.n	800359e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d107      	bne.n	800356c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d109      	bne.n	800357c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0c6      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800356c:	4b66      	ldr	r3, [pc, #408]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0be      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800357c:	f000 f8ce 	bl	800371c <HAL_RCC_GetSysClockFreq>
 8003580:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4a61      	ldr	r2, [pc, #388]	; (800370c <HAL_RCC_ClockConfig+0x268>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d909      	bls.n	800359e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003592:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800359e:	4b5a      	ldr	r3, [pc, #360]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f023 0203 	bic.w	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4957      	ldr	r1, [pc, #348]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b0:	f7fc fe96 	bl	80002e0 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fc fe92 	bl	80002e0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e095      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ce:	4b4e      	ldr	r3, [pc, #312]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 020c 	and.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	429a      	cmp	r2, r3
 80035de:	d1eb      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b43      	ldr	r3, [pc, #268]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a42      	ldr	r2, [pc, #264]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003602:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003610:	4b3d      	ldr	r3, [pc, #244]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003618:	4a3b      	ldr	r2, [pc, #236]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800361a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800361e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	4b39      	ldr	r3, [pc, #228]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4936      	ldr	r1, [pc, #216]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
 8003632:	e008      	b.n	8003646 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d105      	bne.n	8003646 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800363a:	4b33      	ldr	r3, [pc, #204]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	4a32      	ldr	r2, [pc, #200]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 8003640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003644:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	683a      	ldr	r2, [r7, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d21d      	bcs.n	8003690 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003654:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 020f 	bic.w	r2, r3, #15
 800365c:	4929      	ldr	r1, [pc, #164]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003664:	f7fc fe3c 	bl	80002e0 <HAL_GetTick>
 8003668:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800366c:	f7fc fe38 	bl	80002e0 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e03b      	b.n	80036fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_RCC_ClockConfig+0x260>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	429a      	cmp	r2, r3
 800368e:	d1ed      	bne.n	800366c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800369c:	4b1a      	ldr	r3, [pc, #104]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4917      	ldr	r1, [pc, #92]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d009      	beq.n	80036ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ba:	4b13      	ldr	r3, [pc, #76]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	490f      	ldr	r1, [pc, #60]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ce:	f000 f825 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036d2:	4601      	mov	r1, r0
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <HAL_RCC_ClockConfig+0x264>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	091b      	lsrs	r3, r3, #4
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <HAL_RCC_ClockConfig+0x26c>)
 80036e0:	5cd3      	ldrb	r3, [r2, r3]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ea:	4a0a      	ldr	r2, [pc, #40]	; (8003714 <HAL_RCC_ClockConfig+0x270>)
 80036ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80036ee:	4b0a      	ldr	r3, [pc, #40]	; (8003718 <HAL_RCC_ClockConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc fda8 	bl	8000248 <HAL_InitTick>
 80036f8:	4603      	mov	r3, r0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	04c4b400 	.word	0x04c4b400
 8003710:	080085d0 	.word	0x080085d0
 8003714:	20000118 	.word	0x20000118
 8003718:	20000000 	.word	0x20000000

0800371c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d102      	bne.n	8003734 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372e:	4b2a      	ldr	r3, [pc, #168]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e047      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003734:	4b27      	ldr	r3, [pc, #156]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d102      	bne.n	8003746 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	e03e      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003746:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b0c      	cmp	r3, #12
 8003750:	d136      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003752:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800375c:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3301      	adds	r3, #1
 8003768:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d10c      	bne.n	800378a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003770:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	fbb2 f3f3 	udiv	r3, r2, r3
 8003778:	4a16      	ldr	r2, [pc, #88]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800377a:	68d2      	ldr	r2, [r2, #12]
 800377c:	0a12      	lsrs	r2, r2, #8
 800377e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	617b      	str	r3, [r7, #20]
      break;
 8003788:	e00c      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	0a12      	lsrs	r2, r2, #8
 8003798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800379c:	fb02 f303 	mul.w	r3, r2, r3
 80037a0:	617b      	str	r3, [r7, #20]
      break;
 80037a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	0e5b      	lsrs	r3, r3, #25
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e001      	b.n	80037c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037c4:	693b      	ldr	r3, [r7, #16]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200

080037e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000118 	.word	0x20000118

080037f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003808:	4b1b      	ldr	r3, [pc, #108]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	091b      	lsrs	r3, r3, #4
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3301      	adds	r3, #1
 8003814:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d10c      	bne.n	8003836 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381c:	4a17      	ldr	r2, [pc, #92]	; (800387c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	fbb2 f3f3 	udiv	r3, r2, r3
 8003824:	4a14      	ldr	r2, [pc, #80]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003826:	68d2      	ldr	r2, [r2, #12]
 8003828:	0a12      	lsrs	r2, r2, #8
 800382a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	617b      	str	r3, [r7, #20]
    break;
 8003834:	e00c      	b.n	8003850 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	fbb2 f3f3 	udiv	r3, r2, r3
 800383e:	4a0e      	ldr	r2, [pc, #56]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	0a12      	lsrs	r2, r2, #8
 8003844:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003848:	fb02 f303 	mul.w	r3, r2, r3
 800384c:	617b      	str	r3, [r7, #20]
    break;
 800384e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003850:	4b09      	ldr	r3, [pc, #36]	; (8003878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0e5b      	lsrs	r3, r3, #25
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	3301      	adds	r3, #1
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	fbb2 f3f3 	udiv	r3, r2, r3
 8003868:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800386a:	687b      	ldr	r3, [r7, #4]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr
 8003878:	40021000 	.word	0x40021000
 800387c:	007a1200 	.word	0x007a1200
 8003880:	00f42400 	.word	0x00f42400

08003884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800388c:	2300      	movs	r3, #0
 800388e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003890:	2300      	movs	r3, #0
 8003892:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8098 	beq.w	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a2:	2300      	movs	r3, #0
 80038a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10d      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b2:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b6:	4a3f      	ldr	r2, [pc, #252]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038bc:	6593      	str	r3, [r2, #88]	; 0x58
 80038be:	4b3d      	ldr	r3, [pc, #244]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ce:	4b3a      	ldr	r3, [pc, #232]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a39      	ldr	r2, [pc, #228]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038da:	f7fc fd01 	bl	80002e0 <HAL_GetTick>
 80038de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e0:	e009      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e2:	f7fc fcfd 	bl	80002e0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d902      	bls.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	74fb      	strb	r3, [r7, #19]
        break;
 80038f4:	e005      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f6:	4b30      	ldr	r3, [pc, #192]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003902:	7cfb      	ldrb	r3, [r7, #19]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d159      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003912:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01e      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	d019      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003924:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003950:	4a18      	ldr	r2, [pc, #96]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d016      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fc fcbd 	bl	80002e0 <HAL_GetTick>
 8003966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	e00b      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fc fcb9 	bl	80002e0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d902      	bls.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	74fb      	strb	r3, [r7, #19]
            break;
 8003980:	e006      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003982:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ec      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003996:	4b07      	ldr	r3, [pc, #28]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	4903      	ldr	r1, [pc, #12]	; (80039b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039ac:	e008      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	74bb      	strb	r3, [r7, #18]
 80039b2:	e005      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039c0:	7c7b      	ldrb	r3, [r7, #17]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c6:	4ba6      	ldr	r3, [pc, #664]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	4aa5      	ldr	r2, [pc, #660]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039de:	4ba0      	ldr	r3, [pc, #640]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e4:	f023 0203 	bic.w	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	499c      	ldr	r1, [pc, #624]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a00:	4b97      	ldr	r3, [pc, #604]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	f023 020c 	bic.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4994      	ldr	r1, [pc, #592]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a22:	4b8f      	ldr	r3, [pc, #572]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	498b      	ldr	r1, [pc, #556]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a44:	4b86      	ldr	r3, [pc, #536]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	4983      	ldr	r1, [pc, #524]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00a      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	4b7e      	ldr	r3, [pc, #504]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	497a      	ldr	r1, [pc, #488]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a88:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	4972      	ldr	r1, [pc, #456]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003aaa:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4969      	ldr	r1, [pc, #420]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003acc:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4961      	ldr	r1, [pc, #388]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aee:	4b5c      	ldr	r3, [pc, #368]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	4958      	ldr	r1, [pc, #352]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b10:	4b53      	ldr	r3, [pc, #332]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1e:	4950      	ldr	r1, [pc, #320]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b30:	4b4b      	ldr	r3, [pc, #300]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d015      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b48:	4b45      	ldr	r3, [pc, #276]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	4942      	ldr	r1, [pc, #264]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b66:	d105      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b68:	4b3d      	ldr	r3, [pc, #244]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a3c      	ldr	r2, [pc, #240]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d015      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b80:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4934      	ldr	r1, [pc, #208]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b9e:	d105      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ba0:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003baa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d015      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc6:	4926      	ldr	r1, [pc, #152]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bd6:	d105      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	4918      	ldr	r1, [pc, #96]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c0e:	d105      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d015      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c28:	4b0d      	ldr	r3, [pc, #52]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	490a      	ldr	r1, [pc, #40]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c46:	d105      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c48:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4a04      	ldr	r2, [pc, #16]	; (8003c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c54:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e01d      	b.n	8003cb2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f003 feca 	bl	8007a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4610      	mov	r0, r2
 8003ca4:	f000 f922 	bl	8003eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
	...

08003cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e105      	b.n	8003ee2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b14      	cmp	r3, #20
 8003cea:	f200 80f0 	bhi.w	8003ece <HAL_TIM_PWM_ConfigChannel+0x212>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d49 	.word	0x08003d49
 8003cf8:	08003ecf 	.word	0x08003ecf
 8003cfc:	08003ecf 	.word	0x08003ecf
 8003d00:	08003ecf 	.word	0x08003ecf
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003ecf 	.word	0x08003ecf
 8003d0c:	08003ecf 	.word	0x08003ecf
 8003d10:	08003ecf 	.word	0x08003ecf
 8003d14:	08003dcb 	.word	0x08003dcb
 8003d18:	08003ecf 	.word	0x08003ecf
 8003d1c:	08003ecf 	.word	0x08003ecf
 8003d20:	08003ecf 	.word	0x08003ecf
 8003d24:	08003e0b 	.word	0x08003e0b
 8003d28:	08003ecf 	.word	0x08003ecf
 8003d2c:	08003ecf 	.word	0x08003ecf
 8003d30:	08003ecf 	.word	0x08003ecf
 8003d34:	08003e4d 	.word	0x08003e4d
 8003d38:	08003ecf 	.word	0x08003ecf
 8003d3c:	08003ecf 	.word	0x08003ecf
 8003d40:	08003ecf 	.word	0x08003ecf
 8003d44:	08003e8d 	.word	0x08003e8d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 f95c 	bl	800400c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699a      	ldr	r2, [r3, #24]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0208 	orr.w	r2, r2, #8
 8003d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0204 	bic.w	r2, r2, #4
 8003d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6999      	ldr	r1, [r3, #24]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	619a      	str	r2, [r3, #24]
      break;
 8003d86:	e0a3      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 f9cc 	bl	800412c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699a      	ldr	r2, [r3, #24]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6999      	ldr	r1, [r3, #24]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	021a      	lsls	r2, r3, #8
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	619a      	str	r2, [r3, #24]
      break;
 8003dc8:	e082      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fa35 	bl	8004240 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 0204 	bic.w	r2, r2, #4
 8003df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69d9      	ldr	r1, [r3, #28]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	61da      	str	r2, [r3, #28]
      break;
 8003e08:	e062      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fa9d 	bl	8004350 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69d9      	ldr	r1, [r3, #28]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	021a      	lsls	r2, r3, #8
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	61da      	str	r2, [r3, #28]
      break;
 8003e4a:	e041      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fb06 	bl	8004464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f022 0204 	bic.w	r2, r2, #4
 8003e76:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	691a      	ldr	r2, [r3, #16]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e8a:	e021      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 fb4a 	bl	800452c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ea6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	021a      	lsls	r2, r3, #8
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003ecc:	e000      	b.n	8003ed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003ece:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop

08003eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a3c      	ldr	r2, [pc, #240]	; (8003ff0 <TIM_Base_SetConfig+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00f      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f0a:	d00b      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	; (8003ff4 <TIM_Base_SetConfig+0x108>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d007      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a38      	ldr	r2, [pc, #224]	; (8003ff8 <TIM_Base_SetConfig+0x10c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d003      	beq.n	8003f24 <TIM_Base_SetConfig+0x38>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a37      	ldr	r2, [pc, #220]	; (8003ffc <TIM_Base_SetConfig+0x110>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d108      	bne.n	8003f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a2d      	ldr	r2, [pc, #180]	; (8003ff0 <TIM_Base_SetConfig+0x104>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d01b      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f44:	d017      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <TIM_Base_SetConfig+0x108>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <TIM_Base_SetConfig+0x10c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00f      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a28      	ldr	r2, [pc, #160]	; (8003ffc <TIM_Base_SetConfig+0x110>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00b      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a27      	ldr	r2, [pc, #156]	; (8004000 <TIM_Base_SetConfig+0x114>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d007      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a26      	ldr	r2, [pc, #152]	; (8004004 <TIM_Base_SetConfig+0x118>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d003      	beq.n	8003f76 <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a25      	ldr	r2, [pc, #148]	; (8004008 <TIM_Base_SetConfig+0x11c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d108      	bne.n	8003f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <TIM_Base_SetConfig+0x104>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d00f      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a11      	ldr	r2, [pc, #68]	; (8003ffc <TIM_Base_SetConfig+0x110>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d00b      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <TIM_Base_SetConfig+0x114>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d007      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0f      	ldr	r2, [pc, #60]	; (8004004 <TIM_Base_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_Base_SetConfig+0xe8>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <TIM_Base_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d103      	bne.n	8003fdc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	615a      	str	r2, [r3, #20]
}
 8003fe2:	bf00      	nop
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40012c00 	.word	0x40012c00
 8003ff4:	40000400 	.word	0x40000400
 8003ff8:	40000800 	.word	0x40000800
 8003ffc:	40013400 	.word	0x40013400
 8004000:	40014000 	.word	0x40014000
 8004004:	40014400 	.word	0x40014400
 8004008:	40014800 	.word	0x40014800

0800400c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	f023 0201 	bic.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0302 	bic.w	r3, r3, #2
 8004058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a2c      	ldr	r2, [pc, #176]	; (8004118 <TIM_OC1_SetConfig+0x10c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00f      	beq.n	800408c <TIM_OC1_SetConfig+0x80>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a2b      	ldr	r2, [pc, #172]	; (800411c <TIM_OC1_SetConfig+0x110>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_OC1_SetConfig+0x80>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a2a      	ldr	r2, [pc, #168]	; (8004120 <TIM_OC1_SetConfig+0x114>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_OC1_SetConfig+0x80>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a29      	ldr	r2, [pc, #164]	; (8004124 <TIM_OC1_SetConfig+0x118>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_OC1_SetConfig+0x80>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a28      	ldr	r2, [pc, #160]	; (8004128 <TIM_OC1_SetConfig+0x11c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d10c      	bne.n	80040a6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 0308 	bic.w	r3, r3, #8
 8004092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a1b      	ldr	r2, [pc, #108]	; (8004118 <TIM_OC1_SetConfig+0x10c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_OC1_SetConfig+0xc2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a1a      	ldr	r2, [pc, #104]	; (800411c <TIM_OC1_SetConfig+0x110>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_OC1_SetConfig+0xc2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a19      	ldr	r2, [pc, #100]	; (8004120 <TIM_OC1_SetConfig+0x114>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_OC1_SetConfig+0xc2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a18      	ldr	r2, [pc, #96]	; (8004124 <TIM_OC1_SetConfig+0x118>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_OC1_SetConfig+0xc2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <TIM_OC1_SetConfig+0x11c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d111      	bne.n	80040f2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800

0800412c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f023 0210 	bic.w	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800415e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	021b      	lsls	r3, r3, #8
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 0320 	bic.w	r3, r3, #32
 800417a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a28      	ldr	r2, [pc, #160]	; (800422c <TIM_OC2_SetConfig+0x100>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d003      	beq.n	8004198 <TIM_OC2_SetConfig+0x6c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a27      	ldr	r2, [pc, #156]	; (8004230 <TIM_OC2_SetConfig+0x104>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d10d      	bne.n	80041b4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800419e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1d      	ldr	r2, [pc, #116]	; (800422c <TIM_OC2_SetConfig+0x100>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00f      	beq.n	80041dc <TIM_OC2_SetConfig+0xb0>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <TIM_OC2_SetConfig+0x104>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00b      	beq.n	80041dc <TIM_OC2_SetConfig+0xb0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <TIM_OC2_SetConfig+0x108>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <TIM_OC2_SetConfig+0xb0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <TIM_OC2_SetConfig+0x10c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d003      	beq.n	80041dc <TIM_OC2_SetConfig+0xb0>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a19      	ldr	r2, [pc, #100]	; (800423c <TIM_OC2_SetConfig+0x110>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d113      	bne.n	8004204 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40013400 	.word	0x40013400
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800

08004240 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f023 0303 	bic.w	r3, r3, #3
 800427a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800428c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	021b      	lsls	r3, r3, #8
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a27      	ldr	r2, [pc, #156]	; (800433c <TIM_OC3_SetConfig+0xfc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_OC3_SetConfig+0x6a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a26      	ldr	r2, [pc, #152]	; (8004340 <TIM_OC3_SetConfig+0x100>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d10d      	bne.n	80042c6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a1c      	ldr	r2, [pc, #112]	; (800433c <TIM_OC3_SetConfig+0xfc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00f      	beq.n	80042ee <TIM_OC3_SetConfig+0xae>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a1b      	ldr	r2, [pc, #108]	; (8004340 <TIM_OC3_SetConfig+0x100>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_OC3_SetConfig+0xae>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <TIM_OC3_SetConfig+0x104>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_OC3_SetConfig+0xae>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a19      	ldr	r2, [pc, #100]	; (8004348 <TIM_OC3_SetConfig+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC3_SetConfig+0xae>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a18      	ldr	r2, [pc, #96]	; (800434c <TIM_OC3_SetConfig+0x10c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d113      	bne.n	8004316 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	621a      	str	r2, [r3, #32]
}
 8004330:	bf00      	nop
 8004332:	371c      	adds	r7, #28
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40014000 	.word	0x40014000
 8004348:	40014400 	.word	0x40014400
 800434c:	40014800 	.word	0x40014800

08004350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800437e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800439e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a28      	ldr	r2, [pc, #160]	; (8004450 <TIM_OC4_SetConfig+0x100>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC4_SetConfig+0x6c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a27      	ldr	r2, [pc, #156]	; (8004454 <TIM_OC4_SetConfig+0x104>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d10d      	bne.n	80043d8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	031b      	lsls	r3, r3, #12
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1d      	ldr	r2, [pc, #116]	; (8004450 <TIM_OC4_SetConfig+0x100>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00f      	beq.n	8004400 <TIM_OC4_SetConfig+0xb0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a1c      	ldr	r2, [pc, #112]	; (8004454 <TIM_OC4_SetConfig+0x104>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00b      	beq.n	8004400 <TIM_OC4_SetConfig+0xb0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <TIM_OC4_SetConfig+0x108>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_OC4_SetConfig+0xb0>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1a      	ldr	r2, [pc, #104]	; (800445c <TIM_OC4_SetConfig+0x10c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC4_SetConfig+0xb0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a19      	ldr	r2, [pc, #100]	; (8004460 <TIM_OC4_SetConfig+0x110>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d113      	bne.n	8004428 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004406:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800440e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4313      	orrs	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	019b      	lsls	r3, r3, #6
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	40012c00 	.word	0x40012c00
 8004454:	40013400 	.word	0x40013400
 8004458:	40014000 	.word	0x40014000
 800445c:	40014400 	.word	0x40014400
 8004460:	40014800 	.word	0x40014800

08004464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a17      	ldr	r2, [pc, #92]	; (8004518 <TIM_OC5_SetConfig+0xb4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00f      	beq.n	80044de <TIM_OC5_SetConfig+0x7a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a16      	ldr	r2, [pc, #88]	; (800451c <TIM_OC5_SetConfig+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_OC5_SetConfig+0x7a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a15      	ldr	r2, [pc, #84]	; (8004520 <TIM_OC5_SetConfig+0xbc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <TIM_OC5_SetConfig+0x7a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <TIM_OC5_SetConfig+0xc0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_OC5_SetConfig+0x7a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a13      	ldr	r2, [pc, #76]	; (8004528 <TIM_OC5_SetConfig+0xc4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d109      	bne.n	80044f2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800

0800452c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	021b      	lsls	r3, r3, #8
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	051b      	lsls	r3, r3, #20
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4313      	orrs	r3, r2
 800457e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <TIM_OC6_SetConfig+0xb8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d00f      	beq.n	80045a8 <TIM_OC6_SetConfig+0x7c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <TIM_OC6_SetConfig+0xbc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_OC6_SetConfig+0x7c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a16      	ldr	r2, [pc, #88]	; (80045ec <TIM_OC6_SetConfig+0xc0>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_OC6_SetConfig+0x7c>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a15      	ldr	r2, [pc, #84]	; (80045f0 <TIM_OC6_SetConfig+0xc4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_OC6_SetConfig+0x7c>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a14      	ldr	r2, [pc, #80]	; (80045f4 <TIM_OC6_SetConfig+0xc8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	029b      	lsls	r3, r3, #10
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40013400 	.word	0x40013400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40014400 	.word	0x40014400
 80045f4:	40014800 	.word	0x40014800

080045f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004608:	2b01      	cmp	r3, #1
 800460a:	d101      	bne.n	8004610 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800460c:	2302      	movs	r3, #2
 800460e:	e047      	b.n	80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a1c      	ldr	r2, [pc, #112]	; (80046b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d108      	bne.n	8004656 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800464a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	4313      	orrs	r3, r2
 8004654:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800465c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40012c00 	.word	0x40012c00
 80046b0:	40013400 	.word	0x40013400

080046b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046bc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80046c0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80046ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80046f0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	b21a      	sxth	r2, r3
 80046fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004700:	43db      	mvns	r3, r3
 8004702:	b21b      	sxth	r3, r3
 8004704:	4013      	ands	r3, r2
 8004706:	b21b      	sxth	r3, r3
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3714      	adds	r7, #20
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800471e:	b084      	sub	sp, #16
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	f107 0014 	add.w	r0, r7, #20
 800472c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ffaf 	bl	80046b4 <USB_EnableGlobalInt>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004762:	b004      	add	sp, #16
 8004764:	4770      	bx	lr
	...

08004768 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004768:	b490      	push	{r4, r7}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4413      	add	r3, r2
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	b29b      	uxth	r3, r3
 8004784:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	78db      	ldrb	r3, [r3, #3]
 8004792:	2b03      	cmp	r3, #3
 8004794:	d819      	bhi.n	80047ca <USB_ActivateEndpoint+0x62>
 8004796:	a201      	add	r2, pc, #4	; (adr r2, 800479c <USB_ActivateEndpoint+0x34>)
 8004798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479c:	080047ad 	.word	0x080047ad
 80047a0:	080047c1 	.word	0x080047c1
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047b7 	.word	0x080047b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80047ac:	89bb      	ldrh	r3, [r7, #12]
 80047ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047b2:	81bb      	strh	r3, [r7, #12]
      break;
 80047b4:	e00d      	b.n	80047d2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80047b6:	89bb      	ldrh	r3, [r7, #12]
 80047b8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80047bc:	81bb      	strh	r3, [r7, #12]
      break;
 80047be:	e008      	b.n	80047d2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047c0:	89bb      	ldrh	r3, [r7, #12]
 80047c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047c6:	81bb      	strh	r3, [r7, #12]
      break;
 80047c8:	e003      	b.n	80047d2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	73fb      	strb	r3, [r7, #15]
      break;
 80047ce:	e000      	b.n	80047d2 <USB_ActivateEndpoint+0x6a>
      break;
 80047d0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	441a      	add	r2, r3
 80047dc:	89bb      	ldrh	r3, [r7, #12]
 80047de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	b21b      	sxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	b21a      	sxth	r2, r3
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	b21b      	sxth	r3, r3
 8004812:	4313      	orrs	r3, r2
 8004814:	b21b      	sxth	r3, r3
 8004816:	b29c      	uxth	r4, r3
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	441a      	add	r2, r3
 8004822:	4b8a      	ldr	r3, [pc, #552]	; (8004a4c <USB_ActivateEndpoint+0x2e4>)
 8004824:	4323      	orrs	r3, r4
 8004826:	b29b      	uxth	r3, r3
 8004828:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	7b1b      	ldrb	r3, [r3, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f040 8112 	bne.w	8004a58 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d067      	beq.n	800490c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800483c:	687c      	ldr	r4, [r7, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004844:	b29b      	uxth	r3, r3
 8004846:	441c      	add	r4, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4423      	add	r3, r4
 8004850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004854:	461c      	mov	r4, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	88db      	ldrh	r3, [r3, #6]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	b29b      	uxth	r3, r3
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	b29b      	uxth	r3, r3
 8004862:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29c      	uxth	r4, r3
 8004872:	4623      	mov	r3, r4
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d014      	beq.n	80048a6 <USB_ActivateEndpoint+0x13e>
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	4413      	add	r3, r2
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	b29b      	uxth	r3, r3
 800488a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800488e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004892:	b29c      	uxth	r4, r3
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	441a      	add	r2, r3
 800489e:	4b6c      	ldr	r3, [pc, #432]	; (8004a50 <USB_ActivateEndpoint+0x2e8>)
 80048a0:	4323      	orrs	r3, r4
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	78db      	ldrb	r3, [r3, #3]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d018      	beq.n	80048e0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c4:	b29c      	uxth	r4, r3
 80048c6:	f084 0320 	eor.w	r3, r4, #32
 80048ca:	b29c      	uxth	r4, r3
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <USB_ActivateEndpoint+0x2e4>)
 80048d8:	4323      	orrs	r3, r4
 80048da:	b29b      	uxth	r3, r3
 80048dc:	8013      	strh	r3, [r2, #0]
 80048de:	e22b      	b.n	8004d38 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f6:	b29c      	uxth	r4, r3
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	4b52      	ldr	r3, [pc, #328]	; (8004a4c <USB_ActivateEndpoint+0x2e4>)
 8004904:	4323      	orrs	r3, r4
 8004906:	b29b      	uxth	r3, r3
 8004908:	8013      	strh	r3, [r2, #0]
 800490a:	e215      	b.n	8004d38 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800490c:	687c      	ldr	r4, [r7, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	441c      	add	r4, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	4423      	add	r3, r4
 8004920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004924:	461c      	mov	r4, r3
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	88db      	ldrh	r3, [r3, #6]
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	b29b      	uxth	r3, r3
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004934:	687c      	ldr	r4, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800493c:	b29b      	uxth	r3, r3
 800493e:	441c      	add	r4, r3
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4423      	add	r3, r4
 8004948:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800494c:	461c      	mov	r4, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10e      	bne.n	8004974 <USB_ActivateEndpoint+0x20c>
 8004956:	8823      	ldrh	r3, [r4, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800495e:	b29b      	uxth	r3, r3
 8004960:	8023      	strh	r3, [r4, #0]
 8004962:	8823      	ldrh	r3, [r4, #0]
 8004964:	b29b      	uxth	r3, r3
 8004966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800496a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800496e:	b29b      	uxth	r3, r3
 8004970:	8023      	strh	r3, [r4, #0]
 8004972:	e02d      	b.n	80049d0 <USB_ActivateEndpoint+0x268>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b3e      	cmp	r3, #62	; 0x3e
 800497a:	d812      	bhi.n	80049a2 <USB_ActivateEndpoint+0x23a>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	085b      	lsrs	r3, r3, #1
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d002      	beq.n	8004996 <USB_ActivateEndpoint+0x22e>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	3301      	adds	r3, #1
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	b29b      	uxth	r3, r3
 800499a:	029b      	lsls	r3, r3, #10
 800499c:	b29b      	uxth	r3, r3
 800499e:	8023      	strh	r3, [r4, #0]
 80049a0:	e016      	b.n	80049d0 <USB_ActivateEndpoint+0x268>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 031f 	and.w	r3, r3, #31
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <USB_ActivateEndpoint+0x254>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	029b      	lsls	r3, r3, #10
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	881b      	ldrh	r3, [r3, #0]
 80049dc:	b29c      	uxth	r4, r3
 80049de:	4623      	mov	r3, r4
 80049e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d014      	beq.n	8004a12 <USB_ActivateEndpoint+0x2aa>
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fe:	b29c      	uxth	r4, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <USB_ActivateEndpoint+0x2ec>)
 8004a0c:	4323      	orrs	r3, r4
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a28:	b29c      	uxth	r4, r3
 8004a2a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004a2e:	b29c      	uxth	r4, r3
 8004a30:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004a34:	b29c      	uxth	r4, r3
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	4b02      	ldr	r3, [pc, #8]	; (8004a4c <USB_ActivateEndpoint+0x2e4>)
 8004a42:	4323      	orrs	r3, r4
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
 8004a48:	e176      	b.n	8004d38 <USB_ActivateEndpoint+0x5d0>
 8004a4a:	bf00      	nop
 8004a4c:	ffff8080 	.word	0xffff8080
 8004a50:	ffff80c0 	.word	0xffff80c0
 8004a54:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6e:	b29c      	uxth	r4, r3
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	4b96      	ldr	r3, [pc, #600]	; (8004cd4 <USB_ActivateEndpoint+0x56c>)
 8004a7c:	4323      	orrs	r3, r4
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a82:	687c      	ldr	r4, [r7, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	441c      	add	r4, r3
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4423      	add	r3, r4
 8004a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9a:	461c      	mov	r4, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	891b      	ldrh	r3, [r3, #8]
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	005b      	lsls	r3, r3, #1
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	8023      	strh	r3, [r4, #0]
 8004aaa:	687c      	ldr	r4, [r7, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	441c      	add	r4, r3
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4423      	add	r3, r4
 8004abe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	895b      	ldrh	r3, [r3, #10]
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	785b      	ldrb	r3, [r3, #1]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	f040 8088 	bne.w	8004bec <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29c      	uxth	r4, r3
 8004aea:	4623      	mov	r3, r4
 8004aec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d014      	beq.n	8004b1e <USB_ActivateEndpoint+0x3b6>
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	b29c      	uxth	r4, r3
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	441a      	add	r2, r3
 8004b16:	4b70      	ldr	r3, [pc, #448]	; (8004cd8 <USB_ActivateEndpoint+0x570>)
 8004b18:	4323      	orrs	r3, r4
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29c      	uxth	r4, r3
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d014      	beq.n	8004b60 <USB_ActivateEndpoint+0x3f8>
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4c:	b29c      	uxth	r4, r3
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	4b60      	ldr	r3, [pc, #384]	; (8004cdc <USB_ActivateEndpoint+0x574>)
 8004b5a:	4323      	orrs	r3, r4
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b76:	b29c      	uxth	r4, r3
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <USB_ActivateEndpoint+0x574>)
 8004b84:	4323      	orrs	r3, r4
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	4413      	add	r3, r2
 8004b94:	881b      	ldrh	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba0:	b29c      	uxth	r4, r3
 8004ba2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004ba6:	b29c      	uxth	r4, r3
 8004ba8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004bac:	b29c      	uxth	r4, r3
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	4b49      	ldr	r3, [pc, #292]	; (8004ce0 <USB_ActivateEndpoint+0x578>)
 8004bba:	4323      	orrs	r3, r4
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd6:	b29c      	uxth	r4, r3
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	441a      	add	r2, r3
 8004be2:	4b3f      	ldr	r3, [pc, #252]	; (8004ce0 <USB_ActivateEndpoint+0x578>)
 8004be4:	4323      	orrs	r3, r4
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	8013      	strh	r3, [r2, #0]
 8004bea:	e0a5      	b.n	8004d38 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29c      	uxth	r4, r3
 8004bfa:	4623      	mov	r3, r4
 8004bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d014      	beq.n	8004c2e <USB_ActivateEndpoint+0x4c6>
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	4413      	add	r3, r2
 8004c0e:	881b      	ldrh	r3, [r3, #0]
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	b29c      	uxth	r4, r3
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	441a      	add	r2, r3
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <USB_ActivateEndpoint+0x570>)
 8004c28:	4323      	orrs	r3, r4
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	881b      	ldrh	r3, [r3, #0]
 8004c3a:	b29c      	uxth	r4, r3
 8004c3c:	4623      	mov	r3, r4
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d014      	beq.n	8004c70 <USB_ActivateEndpoint+0x508>
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5c:	b29c      	uxth	r4, r3
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	441a      	add	r2, r3
 8004c68:	4b1c      	ldr	r3, [pc, #112]	; (8004cdc <USB_ActivateEndpoint+0x574>)
 8004c6a:	4323      	orrs	r3, r4
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c86:	b29c      	uxth	r4, r3
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	441a      	add	r2, r3
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <USB_ActivateEndpoint+0x570>)
 8004c94:	4323      	orrs	r3, r4
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	78db      	ldrb	r3, [r3, #3]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d020      	beq.n	8004ce4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	881b      	ldrh	r3, [r3, #0]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb8:	b29c      	uxth	r4, r3
 8004cba:	f084 0320 	eor.w	r3, r4, #32
 8004cbe:	b29c      	uxth	r4, r3
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	441a      	add	r2, r3
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <USB_ActivateEndpoint+0x578>)
 8004ccc:	4323      	orrs	r3, r4
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
 8004cd2:	e01c      	b.n	8004d0e <USB_ActivateEndpoint+0x5a6>
 8004cd4:	ffff8180 	.word	0xffff8180
 8004cd8:	ffffc080 	.word	0xffffc080
 8004cdc:	ffff80c0 	.word	0xffff80c0
 8004ce0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfa:	b29c      	uxth	r4, r3
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	441a      	add	r2, r3
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <USB_ActivateEndpoint+0x5dc>)
 8004d08:	4323      	orrs	r3, r4
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	b29c      	uxth	r4, r3
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	441a      	add	r2, r3
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <USB_ActivateEndpoint+0x5dc>)
 8004d32:	4323      	orrs	r3, r4
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc90      	pop	{r4, r7}
 8004d42:	4770      	bx	lr
 8004d44:	ffff8080 	.word	0xffff8080

08004d48 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d48:	b490      	push	{r4, r7}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	7b1b      	ldrb	r3, [r3, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d171      	bne.n	8004e3e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d036      	beq.n	8004dd0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29c      	uxth	r4, r3
 8004d70:	4623      	mov	r3, r4
 8004d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <USB_DeactivateEndpoint+0x5c>
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d90:	b29c      	uxth	r4, r3
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	4b6b      	ldr	r3, [pc, #428]	; (8004f4c <USB_DeactivateEndpoint+0x204>)
 8004d9e:	4323      	orrs	r3, r4
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dba:	b29c      	uxth	r4, r3
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	441a      	add	r2, r3
 8004dc6:	4b62      	ldr	r3, [pc, #392]	; (8004f50 <USB_DeactivateEndpoint+0x208>)
 8004dc8:	4323      	orrs	r3, r4
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
 8004dce:	e144      	b.n	800505a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b29c      	uxth	r4, r3
 8004dde:	4623      	mov	r3, r4
 8004de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d014      	beq.n	8004e12 <USB_DeactivateEndpoint+0xca>
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	b29c      	uxth	r4, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	441a      	add	r2, r3
 8004e0a:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <USB_DeactivateEndpoint+0x20c>)
 8004e0c:	4323      	orrs	r3, r4
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	881b      	ldrh	r3, [r3, #0]
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e28:	b29c      	uxth	r4, r3
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	441a      	add	r2, r3
 8004e34:	4b46      	ldr	r3, [pc, #280]	; (8004f50 <USB_DeactivateEndpoint+0x208>)
 8004e36:	4323      	orrs	r3, r4
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	8013      	strh	r3, [r2, #0]
 8004e3c:	e10d      	b.n	800505a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	f040 8088 	bne.w	8004f58 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	881b      	ldrh	r3, [r3, #0]
 8004e54:	b29c      	uxth	r4, r3
 8004e56:	4623      	mov	r3, r4
 8004e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d014      	beq.n	8004e8a <USB_DeactivateEndpoint+0x142>
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e76:	b29c      	uxth	r4, r3
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <USB_DeactivateEndpoint+0x20c>)
 8004e84:	4323      	orrs	r3, r4
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	881b      	ldrh	r3, [r3, #0]
 8004e96:	b29c      	uxth	r4, r3
 8004e98:	4623      	mov	r3, r4
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d014      	beq.n	8004ecc <USB_DeactivateEndpoint+0x184>
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	b29c      	uxth	r4, r3
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	441a      	add	r2, r3
 8004ec4:	4b21      	ldr	r3, [pc, #132]	; (8004f4c <USB_DeactivateEndpoint+0x204>)
 8004ec6:	4323      	orrs	r3, r4
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	881b      	ldrh	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee2:	b29c      	uxth	r4, r3
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	441a      	add	r2, r3
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <USB_DeactivateEndpoint+0x204>)
 8004ef0:	4323      	orrs	r3, r4
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	b29c      	uxth	r4, r3
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	441a      	add	r2, r3
 8004f18:	4b0d      	ldr	r3, [pc, #52]	; (8004f50 <USB_DeactivateEndpoint+0x208>)
 8004f1a:	4323      	orrs	r3, r4
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	b29c      	uxth	r4, r3
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	441a      	add	r2, r3
 8004f42:	4b03      	ldr	r3, [pc, #12]	; (8004f50 <USB_DeactivateEndpoint+0x208>)
 8004f44:	4323      	orrs	r3, r4
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	8013      	strh	r3, [r2, #0]
 8004f4a:	e086      	b.n	800505a <USB_DeactivateEndpoint+0x312>
 8004f4c:	ffff80c0 	.word	0xffff80c0
 8004f50:	ffff8080 	.word	0xffff8080
 8004f54:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29c      	uxth	r4, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d014      	beq.n	8004f9a <USB_DeactivateEndpoint+0x252>
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	4b35      	ldr	r3, [pc, #212]	; (8005068 <USB_DeactivateEndpoint+0x320>)
 8004f94:	4323      	orrs	r3, r4
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29c      	uxth	r4, r3
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d014      	beq.n	8004fdc <USB_DeactivateEndpoint+0x294>
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	b29c      	uxth	r4, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	4b25      	ldr	r3, [pc, #148]	; (800506c <USB_DeactivateEndpoint+0x324>)
 8004fd6:	4323      	orrs	r3, r4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	b29c      	uxth	r4, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <USB_DeactivateEndpoint+0x320>)
 8005000:	4323      	orrs	r3, r4
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800501c:	b29c      	uxth	r4, r3
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <USB_DeactivateEndpoint+0x328>)
 800502a:	4323      	orrs	r3, r4
 800502c:	b29b      	uxth	r3, r3
 800502e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	b29c      	uxth	r4, r3
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	441a      	add	r2, r3
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <USB_DeactivateEndpoint+0x328>)
 8005054:	4323      	orrs	r3, r4
 8005056:	b29b      	uxth	r3, r3
 8005058:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bc90      	pop	{r4, r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	ffffc080 	.word	0xffffc080
 800506c:	ffff80c0 	.word	0xffff80c0
 8005070:	ffff8080 	.word	0xffff8080

08005074 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005074:	b590      	push	{r4, r7, lr}
 8005076:	b08d      	sub	sp, #52	; 0x34
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	2b01      	cmp	r3, #1
 8005084:	f040 8160 	bne.w	8005348 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	699a      	ldr	r2, [r3, #24]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d909      	bls.n	80050a8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	699a      	ldr	r2, [r3, #24]
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	1ad2      	subs	r2, r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	619a      	str	r2, [r3, #24]
 80050a6:	e005      	b.n	80050b4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2200      	movs	r2, #0
 80050b2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	7b1b      	ldrb	r3, [r3, #12]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d119      	bne.n	80050f0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6959      	ldr	r1, [r3, #20]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	88da      	ldrh	r2, [r3, #6]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fba8 	bl	800581e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050ce:	687c      	ldr	r4, [r7, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	441c      	add	r4, r3
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4423      	add	r3, r4
 80050e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050e6:	461c      	mov	r4, r3
 80050e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	8023      	strh	r3, [r4, #0]
 80050ee:	e10f      	b.n	8005310 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005102:	2b00      	cmp	r3, #0
 8005104:	d065      	beq.n	80051d2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005106:	687c      	ldr	r4, [r7, #4]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d148      	bne.n	80051a2 <USB_EPStartXfer+0x12e>
 8005110:	687c      	ldr	r4, [r7, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005118:	b29b      	uxth	r3, r3
 800511a:	441c      	add	r4, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4423      	add	r3, r4
 8005124:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005128:	461c      	mov	r4, r3
 800512a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10e      	bne.n	800514e <USB_EPStartXfer+0xda>
 8005130:	8823      	ldrh	r3, [r4, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005138:	b29b      	uxth	r3, r3
 800513a:	8023      	strh	r3, [r4, #0]
 800513c:	8823      	ldrh	r3, [r4, #0]
 800513e:	b29b      	uxth	r3, r3
 8005140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005148:	b29b      	uxth	r3, r3
 800514a:	8023      	strh	r3, [r4, #0]
 800514c:	e03d      	b.n	80051ca <USB_EPStartXfer+0x156>
 800514e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005150:	2b3e      	cmp	r3, #62	; 0x3e
 8005152:	d810      	bhi.n	8005176 <USB_EPStartXfer+0x102>
 8005154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <USB_EPStartXfer+0xf6>
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	3301      	adds	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	b29b      	uxth	r3, r3
 800516e:	029b      	lsls	r3, r3, #10
 8005170:	b29b      	uxth	r3, r3
 8005172:	8023      	strh	r3, [r4, #0]
 8005174:	e029      	b.n	80051ca <USB_EPStartXfer+0x156>
 8005176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <USB_EPStartXfer+0x118>
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	3b01      	subs	r3, #1
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	b29b      	uxth	r3, r3
 8005190:	029b      	lsls	r3, r3, #10
 8005192:	b29b      	uxth	r3, r3
 8005194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519c:	b29b      	uxth	r3, r3
 800519e:	8023      	strh	r3, [r4, #0]
 80051a0:	e013      	b.n	80051ca <USB_EPStartXfer+0x156>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d10f      	bne.n	80051ca <USB_EPStartXfer+0x156>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	441c      	add	r4, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	00db      	lsls	r3, r3, #3
 80051ba:	4423      	add	r3, r4
 80051bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	895b      	ldrh	r3, [r3, #10]
 80051ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051d0:	e063      	b.n	800529a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	785b      	ldrb	r3, [r3, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d148      	bne.n	800526c <USB_EPStartXfer+0x1f8>
 80051da:	687c      	ldr	r4, [r7, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	441c      	add	r4, r3
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4423      	add	r3, r4
 80051ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051f2:	461c      	mov	r4, r3
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10e      	bne.n	8005218 <USB_EPStartXfer+0x1a4>
 80051fa:	8823      	ldrh	r3, [r4, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005202:	b29b      	uxth	r3, r3
 8005204:	8023      	strh	r3, [r4, #0]
 8005206:	8823      	ldrh	r3, [r4, #0]
 8005208:	b29b      	uxth	r3, r3
 800520a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005212:	b29b      	uxth	r3, r3
 8005214:	8023      	strh	r3, [r4, #0]
 8005216:	e03d      	b.n	8005294 <USB_EPStartXfer+0x220>
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b3e      	cmp	r3, #62	; 0x3e
 800521c:	d810      	bhi.n	8005240 <USB_EPStartXfer+0x1cc>
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <USB_EPStartXfer+0x1c0>
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	3301      	adds	r3, #1
 8005232:	623b      	str	r3, [r7, #32]
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	b29b      	uxth	r3, r3
 8005238:	029b      	lsls	r3, r3, #10
 800523a:	b29b      	uxth	r3, r3
 800523c:	8023      	strh	r3, [r4, #0]
 800523e:	e029      	b.n	8005294 <USB_EPStartXfer+0x220>
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	623b      	str	r3, [r7, #32]
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2b00      	cmp	r3, #0
 800524e:	d102      	bne.n	8005256 <USB_EPStartXfer+0x1e2>
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	3b01      	subs	r3, #1
 8005254:	623b      	str	r3, [r7, #32]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	b29b      	uxth	r3, r3
 800525a:	029b      	lsls	r3, r3, #10
 800525c:	b29b      	uxth	r3, r3
 800525e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005266:	b29b      	uxth	r3, r3
 8005268:	8023      	strh	r3, [r4, #0]
 800526a:	e013      	b.n	8005294 <USB_EPStartXfer+0x220>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d10f      	bne.n	8005294 <USB_EPStartXfer+0x220>
 8005274:	687c      	ldr	r4, [r7, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	441c      	add	r4, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4423      	add	r3, r4
 8005288:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800528c:	461c      	mov	r4, r3
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	b29b      	uxth	r3, r3
 8005292:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	891b      	ldrh	r3, [r3, #8]
 8005298:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6959      	ldr	r1, [r3, #20]
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 faba 	bl	800581e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	785b      	ldrb	r3, [r3, #1]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d115      	bne.n	80052de <USB_EPStartXfer+0x26a>
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c8:	b29c      	uxth	r4, r3
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	441a      	add	r2, r3
 80052d4:	4b9a      	ldr	r3, [pc, #616]	; (8005540 <USB_EPStartXfer+0x4cc>)
 80052d6:	4323      	orrs	r3, r4
 80052d8:	b29b      	uxth	r3, r3
 80052da:	8013      	strh	r3, [r2, #0]
 80052dc:	e018      	b.n	8005310 <USB_EPStartXfer+0x29c>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	785b      	ldrb	r3, [r3, #1]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d114      	bne.n	8005310 <USB_EPStartXfer+0x29c>
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fc:	b29c      	uxth	r4, r3
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	441a      	add	r2, r3
 8005308:	4b8e      	ldr	r3, [pc, #568]	; (8005544 <USB_EPStartXfer+0x4d0>)
 800530a:	4323      	orrs	r3, r4
 800530c:	b29b      	uxth	r3, r3
 800530e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	b29b      	uxth	r3, r3
 800531e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005326:	b29c      	uxth	r4, r3
 8005328:	f084 0310 	eor.w	r3, r4, #16
 800532c:	b29c      	uxth	r4, r3
 800532e:	f084 0320 	eor.w	r3, r4, #32
 8005332:	b29c      	uxth	r4, r3
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	441a      	add	r2, r3
 800533e:	4b82      	ldr	r3, [pc, #520]	; (8005548 <USB_EPStartXfer+0x4d4>)
 8005340:	4323      	orrs	r3, r4
 8005342:	b29b      	uxth	r3, r3
 8005344:	8013      	strh	r3, [r2, #0]
 8005346:	e146      	b.n	80055d6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d909      	bls.n	8005368 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	1ad2      	subs	r2, r2, r3
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	619a      	str	r2, [r3, #24]
 8005366:	e005      	b.n	8005374 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	2200      	movs	r2, #0
 8005372:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	7b1b      	ldrb	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d148      	bne.n	800540e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800537c:	687c      	ldr	r4, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	441c      	add	r4, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4423      	add	r3, r4
 8005390:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005394:	461c      	mov	r4, r3
 8005396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10e      	bne.n	80053ba <USB_EPStartXfer+0x346>
 800539c:	8823      	ldrh	r3, [r4, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	8023      	strh	r3, [r4, #0]
 80053a8:	8823      	ldrh	r3, [r4, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	8023      	strh	r3, [r4, #0]
 80053b8:	e0f2      	b.n	80055a0 <USB_EPStartXfer+0x52c>
 80053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053bc:	2b3e      	cmp	r3, #62	; 0x3e
 80053be:	d810      	bhi.n	80053e2 <USB_EPStartXfer+0x36e>
 80053c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <USB_EPStartXfer+0x362>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	b29b      	uxth	r3, r3
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	b29b      	uxth	r3, r3
 80053de:	8023      	strh	r3, [r4, #0]
 80053e0:	e0de      	b.n	80055a0 <USB_EPStartXfer+0x52c>
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	f003 031f 	and.w	r3, r3, #31
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d102      	bne.n	80053f8 <USB_EPStartXfer+0x384>
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	b29b      	uxth	r3, r3
 8005400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005408:	b29b      	uxth	r3, r3
 800540a:	8023      	strh	r3, [r4, #0]
 800540c:	e0c8      	b.n	80055a0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	785b      	ldrb	r3, [r3, #1]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d148      	bne.n	80054a8 <USB_EPStartXfer+0x434>
 8005416:	687c      	ldr	r4, [r7, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541e:	b29b      	uxth	r3, r3
 8005420:	441c      	add	r4, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4423      	add	r3, r4
 800542a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800542e:	461c      	mov	r4, r3
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10e      	bne.n	8005454 <USB_EPStartXfer+0x3e0>
 8005436:	8823      	ldrh	r3, [r4, #0]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800543e:	b29b      	uxth	r3, r3
 8005440:	8023      	strh	r3, [r4, #0]
 8005442:	8823      	ldrh	r3, [r4, #0]
 8005444:	b29b      	uxth	r3, r3
 8005446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544e:	b29b      	uxth	r3, r3
 8005450:	8023      	strh	r3, [r4, #0]
 8005452:	e03d      	b.n	80054d0 <USB_EPStartXfer+0x45c>
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	2b3e      	cmp	r3, #62	; 0x3e
 8005458:	d810      	bhi.n	800547c <USB_EPStartXfer+0x408>
 800545a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <USB_EPStartXfer+0x3fc>
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	3301      	adds	r3, #1
 800546e:	61bb      	str	r3, [r7, #24]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	b29b      	uxth	r3, r3
 8005474:	029b      	lsls	r3, r3, #10
 8005476:	b29b      	uxth	r3, r3
 8005478:	8023      	strh	r3, [r4, #0]
 800547a:	e029      	b.n	80054d0 <USB_EPStartXfer+0x45c>
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	095b      	lsrs	r3, r3, #5
 8005480:	61bb      	str	r3, [r7, #24]
 8005482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <USB_EPStartXfer+0x41e>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	3b01      	subs	r3, #1
 8005490:	61bb      	str	r3, [r7, #24]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	b29b      	uxth	r3, r3
 8005496:	029b      	lsls	r3, r3, #10
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	8023      	strh	r3, [r4, #0]
 80054a6:	e013      	b.n	80054d0 <USB_EPStartXfer+0x45c>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	785b      	ldrb	r3, [r3, #1]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d10f      	bne.n	80054d0 <USB_EPStartXfer+0x45c>
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	441c      	add	r4, r3
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4423      	add	r3, r4
 80054c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054c8:	461c      	mov	r4, r3
 80054ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	8023      	strh	r3, [r4, #0]
 80054d0:	687c      	ldr	r4, [r7, #4]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	785b      	ldrb	r3, [r3, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d14e      	bne.n	8005578 <USB_EPStartXfer+0x504>
 80054da:	687c      	ldr	r4, [r7, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	441c      	add	r4, r3
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4423      	add	r3, r4
 80054ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054f2:	461c      	mov	r4, r3
 80054f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10e      	bne.n	8005518 <USB_EPStartXfer+0x4a4>
 80054fa:	8823      	ldrh	r3, [r4, #0]
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005502:	b29b      	uxth	r3, r3
 8005504:	8023      	strh	r3, [r4, #0]
 8005506:	8823      	ldrh	r3, [r4, #0]
 8005508:	b29b      	uxth	r3, r3
 800550a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800550e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005512:	b29b      	uxth	r3, r3
 8005514:	8023      	strh	r3, [r4, #0]
 8005516:	e043      	b.n	80055a0 <USB_EPStartXfer+0x52c>
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2b3e      	cmp	r3, #62	; 0x3e
 800551c:	d816      	bhi.n	800554c <USB_EPStartXfer+0x4d8>
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	085b      	lsrs	r3, r3, #1
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <USB_EPStartXfer+0x4c0>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3301      	adds	r3, #1
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	b29b      	uxth	r3, r3
 8005538:	029b      	lsls	r3, r3, #10
 800553a:	b29b      	uxth	r3, r3
 800553c:	8023      	strh	r3, [r4, #0]
 800553e:	e02f      	b.n	80055a0 <USB_EPStartXfer+0x52c>
 8005540:	ffff80c0 	.word	0xffff80c0
 8005544:	ffffc080 	.word	0xffffc080
 8005548:	ffff8080 	.word	0xffff8080
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	2b00      	cmp	r3, #0
 800555a:	d102      	bne.n	8005562 <USB_EPStartXfer+0x4ee>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	3b01      	subs	r3, #1
 8005560:	617b      	str	r3, [r7, #20]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	b29b      	uxth	r3, r3
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	b29b      	uxth	r3, r3
 800556a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800556e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005572:	b29b      	uxth	r3, r3
 8005574:	8023      	strh	r3, [r4, #0]
 8005576:	e013      	b.n	80055a0 <USB_EPStartXfer+0x52c>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d10f      	bne.n	80055a0 <USB_EPStartXfer+0x52c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005586:	b29b      	uxth	r3, r3
 8005588:	441c      	add	r4, r3
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4423      	add	r3, r4
 8005592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	b29a      	uxth	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b6:	b29c      	uxth	r4, r3
 80055b8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80055bc:	b29c      	uxth	r4, r3
 80055be:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80055c2:	b29c      	uxth	r4, r3
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	441a      	add	r2, r3
 80055ce:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <USB_EPStartXfer+0x56c>)
 80055d0:	4323      	orrs	r3, r4
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3734      	adds	r7, #52	; 0x34
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd90      	pop	{r4, r7, pc}
 80055e0:	ffff8080 	.word	0xffff8080

080055e4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80055e4:	b490      	push	{r4, r7}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d018      	beq.n	8005628 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	b29b      	uxth	r3, r3
 8005604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800560c:	b29c      	uxth	r4, r3
 800560e:	f084 0310 	eor.w	r3, r4, #16
 8005612:	b29c      	uxth	r4, r3
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	4b11      	ldr	r3, [pc, #68]	; (8005664 <USB_EPSetStall+0x80>)
 8005620:	4323      	orrs	r3, r4
 8005622:	b29b      	uxth	r3, r3
 8005624:	8013      	strh	r3, [r2, #0]
 8005626:	e017      	b.n	8005658 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	b29c      	uxth	r4, r3
 8005640:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005644:	b29c      	uxth	r4, r3
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	441a      	add	r2, r3
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <USB_EPSetStall+0x80>)
 8005652:	4323      	orrs	r3, r4
 8005654:	b29b      	uxth	r3, r3
 8005656:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bc90      	pop	{r4, r7}
 8005662:	4770      	bx	lr
 8005664:	ffff8080 	.word	0xffff8080

08005668 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005668:	b490      	push	{r4, r7}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	7b1b      	ldrb	r3, [r3, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d17d      	bne.n	8005776 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d03d      	beq.n	80056fe <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4413      	add	r3, r2
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	b29c      	uxth	r4, r3
 8005690:	4623      	mov	r3, r4
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d014      	beq.n	80056c4 <USB_EPClearStall+0x5c>
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b0:	b29c      	uxth	r4, r3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	441a      	add	r2, r3
 80056bc:	4b31      	ldr	r3, [pc, #196]	; (8005784 <USB_EPClearStall+0x11c>)
 80056be:	4323      	orrs	r3, r4
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	78db      	ldrb	r3, [r3, #3]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d054      	beq.n	8005776 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e2:	b29c      	uxth	r4, r3
 80056e4:	f084 0320 	eor.w	r3, r4, #32
 80056e8:	b29c      	uxth	r4, r3
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	441a      	add	r2, r3
 80056f4:	4b24      	ldr	r3, [pc, #144]	; (8005788 <USB_EPClearStall+0x120>)
 80056f6:	4323      	orrs	r3, r4
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	8013      	strh	r3, [r2, #0]
 80056fc:	e03b      	b.n	8005776 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	4413      	add	r3, r2
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29c      	uxth	r4, r3
 800570c:	4623      	mov	r3, r4
 800570e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d014      	beq.n	8005740 <USB_EPClearStall+0xd8>
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4413      	add	r3, r2
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	b29b      	uxth	r3, r3
 8005724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800572c:	b29c      	uxth	r4, r3
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	441a      	add	r2, r3
 8005738:	4b14      	ldr	r3, [pc, #80]	; (800578c <USB_EPClearStall+0x124>)
 800573a:	4323      	orrs	r3, r4
 800573c:	b29b      	uxth	r3, r3
 800573e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	b29c      	uxth	r4, r3
 8005758:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800575c:	b29c      	uxth	r4, r3
 800575e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005762:	b29c      	uxth	r4, r3
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <USB_EPClearStall+0x120>)
 8005770:	4323      	orrs	r3, r4
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bc90      	pop	{r4, r7}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	ffff80c0 	.word	0xffff80c0
 8005788:	ffff8080 	.word	0xffff8080
 800578c:	ffffc080 	.word	0xffffc080

08005790 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2280      	movs	r2, #128	; 0x80
 80057a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80057aa:	2300      	movs	r3, #0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80057f8:	68fb      	ldr	r3, [r7, #12]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800581e:	b480      	push	{r7}
 8005820:	b08d      	sub	sp, #52	; 0x34
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	4611      	mov	r1, r2
 800582a:	461a      	mov	r2, r3
 800582c:	460b      	mov	r3, r1
 800582e:	80fb      	strh	r3, [r7, #6]
 8005830:	4613      	mov	r3, r2
 8005832:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005834:	88bb      	ldrh	r3, [r7, #4]
 8005836:	3301      	adds	r3, #1
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005844:	88fa      	ldrh	r2, [r7, #6]
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005854:	e01b      	b.n	800588e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	3301      	adds	r3, #1
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	b29b      	uxth	r3, r3
 800586c:	461a      	mov	r2, r3
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	4313      	orrs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	b29a      	uxth	r2, r3
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	3302      	adds	r3, #2
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	3b01      	subs	r3, #1
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e0      	bne.n	8005856 <USB_WritePMA+0x38>
  }
}
 8005894:	bf00      	nop
 8005896:	3734      	adds	r7, #52	; 0x34
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b08b      	sub	sp, #44	; 0x2c
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	460b      	mov	r3, r1
 80058b0:	80fb      	strh	r3, [r7, #6]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80058b6:	88bb      	ldrh	r3, [r7, #4]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80058c6:	88fa      	ldrh	r2, [r7, #6]
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80058d0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
 80058d6:	e018      	b.n	800590a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80058e0:	6a3b      	ldr	r3, [r7, #32]
 80058e2:	3302      	adds	r3, #2
 80058e4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	0a1b      	lsrs	r3, r3, #8
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3301      	adds	r3, #1
 8005902:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	3b01      	subs	r3, #1
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e3      	bne.n	80058d8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005910:	88bb      	ldrh	r3, [r7, #4]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	b29b      	uxth	r3, r3
 8005922:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	b2da      	uxtb	r2, r3
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	701a      	strb	r2, [r3, #0]
  }
}
 800592c:	bf00      	nop
 800592e:	372c      	adds	r7, #44	; 0x2c
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	7c1b      	ldrb	r3, [r3, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005950:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005954:	2202      	movs	r2, #2
 8005956:	2181      	movs	r1, #129	; 0x81
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f002 fb04 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005968:	2202      	movs	r2, #2
 800596a:	2101      	movs	r1, #1
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f002 fafa 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800597a:	e012      	b.n	80059a2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	2202      	movs	r2, #2
 8005980:	2181      	movs	r1, #129	; 0x81
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f002 faef 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800598e:	2340      	movs	r3, #64	; 0x40
 8005990:	2202      	movs	r2, #2
 8005992:	2101      	movs	r1, #1
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f002 fae6 	bl	8007f66 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80059a2:	2308      	movs	r3, #8
 80059a4:	2203      	movs	r2, #3
 80059a6:	2182      	movs	r1, #130	; 0x82
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 fadc 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059b4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059b8:	f002 fc2c 	bl	8008214 <USBD_static_malloc>
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80059ce:	2301      	movs	r3, #1
 80059d0:	73fb      	strb	r3, [r7, #15]
 80059d2:	e026      	b.n	8005a22 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059da:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7c1b      	ldrb	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d109      	bne.n	8005a12 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f002 fb96 	bl	800813c <USBD_LL_PrepareReceive>
 8005a10:	e007      	b.n	8005a22 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f002 fb8d 	bl	800813c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a3c:	2181      	movs	r1, #129	; 0x81
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f002 fab7 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f002 fab0 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005a5a:	2182      	movs	r1, #130	; 0x82
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f002 faa8 	bl	8007fb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00e      	beq.n	8005a90 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 fbd4 	bl	8008230 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b086      	sub	sp, #24
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aaa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d039      	beq.n	8005b38 <USBD_CDC_Setup+0x9e>
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d17c      	bne.n	8005bc2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	88db      	ldrh	r3, [r3, #6]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d029      	beq.n	8005b24 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	b25b      	sxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	da11      	bge.n	8005afe <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005ae6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	88d2      	ldrh	r2, [r2, #6]
 8005aec:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005aee:	6939      	ldr	r1, [r7, #16]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	88db      	ldrh	r3, [r3, #6]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 fa2a 	bl	8006f50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005afc:	e068      	b.n	8005bd0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	785a      	ldrb	r2, [r3, #1]
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	88db      	ldrh	r3, [r3, #6]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005b14:	6939      	ldr	r1, [r7, #16]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 fa45 	bl	8006fac <USBD_CtlPrepareRx>
      break;
 8005b22:	e055      	b.n	8005bd0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	7850      	ldrb	r0, [r2, #1]
 8005b30:	2200      	movs	r2, #0
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	4798      	blx	r3
      break;
 8005b36:	e04b      	b.n	8005bd0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b0a      	cmp	r3, #10
 8005b3e:	d017      	beq.n	8005b70 <USBD_CDC_Setup+0xd6>
 8005b40:	2b0b      	cmp	r3, #11
 8005b42:	d029      	beq.n	8005b98 <USBD_CDC_Setup+0xfe>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d133      	bne.n	8005bb0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d107      	bne.n	8005b62 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b52:	f107 030c 	add.w	r3, r7, #12
 8005b56:	2202      	movs	r2, #2
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 f9f8 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b60:	e02e      	b.n	8005bc0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 f988 	bl	8006e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6e:	e027      	b.n	8005bc0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d107      	bne.n	8005b8a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b7a:	f107 030f 	add.w	r3, r7, #15
 8005b7e:	2201      	movs	r2, #1
 8005b80:	4619      	mov	r1, r3
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f001 f9e4 	bl	8006f50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b88:	e01a      	b.n	8005bc0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f001 f974 	bl	8006e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b92:	2302      	movs	r3, #2
 8005b94:	75fb      	strb	r3, [r7, #23]
          break;
 8005b96:	e013      	b.n	8005bc0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d00d      	beq.n	8005bbe <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f968 	bl	8006e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8005baa:	2302      	movs	r3, #2
 8005bac:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bae:	e006      	b.n	8005bbe <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 f961 	bl	8006e7a <USBD_CtlError>
          ret = USBD_FAIL;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	75fb      	strb	r3, [r7, #23]
          break;
 8005bbc:	e000      	b.n	8005bc0 <USBD_CDC_Setup+0x126>
          break;
 8005bbe:	bf00      	nop
      }
      break;
 8005bc0:	e006      	b.n	8005bd0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f001 f958 	bl	8006e7a <USBD_CtlError>
      ret = USBD_FAIL;
 8005bca:	2302      	movs	r3, #2
 8005bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bce:	bf00      	nop
  }

  return ret;
 8005bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bf4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d037      	beq.n	8005c70 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	331c      	adds	r3, #28
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d026      	beq.n	8005c64 <USBD_CDC_DataIn+0x8a>
 8005c16:	78fa      	ldrb	r2, [r7, #3]
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	440b      	add	r3, r1
 8005c24:	331c      	adds	r3, #28
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	0152      	lsls	r2, r2, #5
 8005c2e:	440a      	add	r2, r1
 8005c30:	3238      	adds	r2, #56	; 0x38
 8005c32:	6812      	ldr	r2, [r2, #0]
 8005c34:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c38:	fb02 f201 	mul.w	r2, r2, r1
 8005c3c:	1a9b      	subs	r3, r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d110      	bne.n	8005c64 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	331c      	adds	r3, #28
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c56:	78f9      	ldrb	r1, [r7, #3]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f002 fa4a 	bl	80080f6 <USBD_LL_Transmit>
 8005c62:	e003      	b.n	8005c6c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e000      	b.n	8005c72 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	460b      	mov	r3, r1
 8005c84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	4619      	mov	r1, r3
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f002 fa75 	bl	8008182 <USBD_LL_GetRxDataSize>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00d      	beq.n	8005cc6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005cbe:	4611      	mov	r1, r2
 8005cc0:	4798      	blx	r3

    return USBD_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e000      	b.n	8005cc8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8005cc6:	2302      	movs	r3, #2
  }
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cde:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d015      	beq.n	8005d16 <USBD_CDC_EP0_RxReady+0x46>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005cf0:	2bff      	cmp	r3, #255	; 0xff
 8005cf2:	d010      	beq.n	8005d16 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005d02:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005d0a:	b292      	uxth	r2, r2
 8005d0c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	; 0xff
 8005d12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2243      	movs	r2, #67	; 0x43
 8005d2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000090 	.word	0x20000090

08005d40 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2243      	movs	r2, #67	; 0x43
 8005d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	2000004c 	.word	0x2000004c

08005d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2243      	movs	r2, #67	; 0x43
 8005d6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005d6e:	4b03      	ldr	r3, [pc, #12]	; (8005d7c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	200000d4 	.word	0x200000d4

08005d80 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	220a      	movs	r2, #10
 8005d8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005d8e:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr
 8005d9c:	20000008 	.word	0x20000008

08005da0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005daa:	2302      	movs	r3, #2
 8005dac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b087      	sub	sp, #28
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005de2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b085      	sub	sp, #20
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e12:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	683a      	ldr	r2, [r7, #0]
 8005e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b084      	sub	sp, #16
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01c      	beq.n	8005e7e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d115      	bne.n	8005e7a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2181      	movs	r1, #129	; 0x81
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f002 f940 	bl	80080f6 <USBD_LL_Transmit>

      return USBD_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e002      	b.n	8005e80 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005e7e:	2302      	movs	r3, #2
  }
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d017      	beq.n	8005ed2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	7c1b      	ldrb	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d109      	bne.n	8005ebe <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb4:	2101      	movs	r1, #1
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f002 f940 	bl	800813c <USBD_LL_PrepareReceive>
 8005ebc:	e007      	b.n	8005ece <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f002 f937 	bl	800813c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e000      	b.n	8005ed4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005ed2:	2302      	movs	r3, #2
  }
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005ef0:	2302      	movs	r3, #2
 8005ef2:	e01a      	b.n	8005f2a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	79fa      	ldrb	r2, [r7, #7]
 8005f20:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f001 ffa4 	bl	8007e70 <USBD_LL_Init>

  return USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b085      	sub	sp, #20
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d006      	beq.n	8005f54 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	e001      	b.n	8005f58 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005f54:	2302      	movs	r3, #2
 8005f56:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 ffde 	bl	8007f30 <USBD_LL_Start>

  return USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	78fa      	ldrb	r2, [r7, #3]
 8005fb8:	4611      	mov	r1, r2
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	4798      	blx	r3
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3

  return USBD_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3708      	adds	r7, #8
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fef8 	bl	8006e00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800601e:	461a      	mov	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	2b01      	cmp	r3, #1
 8006032:	d00c      	beq.n	800604e <USBD_LL_SetupStage+0x56>
 8006034:	2b01      	cmp	r3, #1
 8006036:	d302      	bcc.n	800603e <USBD_LL_SetupStage+0x46>
 8006038:	2b02      	cmp	r3, #2
 800603a:	d010      	beq.n	800605e <USBD_LL_SetupStage+0x66>
 800603c:	e017      	b.n	800606e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006044:	4619      	mov	r1, r3
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 f9ce 	bl	80063e8 <USBD_StdDevReq>
      break;
 800604c:	e01a      	b.n	8006084 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 fa30 	bl	80064bc <USBD_StdItfReq>
      break;
 800605c:	e012      	b.n	8006084 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa6e 	bl	8006548 <USBD_StdEPReq>
      break;
 800606c:	e00a      	b.n	8006084 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006074:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006078:	b2db      	uxtb	r3, r3
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f001 ffb7 	bl	8007ff0 <USBD_LL_StallEP>
      break;
 8006082:	bf00      	nop
  }

  return USBD_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	460b      	mov	r3, r1
 8006098:	607a      	str	r2, [r7, #4]
 800609a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800609c:	7afb      	ldrb	r3, [r7, #11]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d14b      	bne.n	800613a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80060a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d134      	bne.n	800611e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d919      	bls.n	80060f4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	1ad2      	subs	r2, r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d203      	bcs.n	80060e2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80060de:	b29b      	uxth	r3, r3
 80060e0:	e002      	b.n	80060e8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	461a      	mov	r2, r3
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 ff7b 	bl	8006fe8 <USBD_CtlContinueRx>
 80060f2:	e038      	b.n	8006166 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d00a      	beq.n	8006116 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006106:	2b03      	cmp	r3, #3
 8006108:	d105      	bne.n	8006116 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 ff78 	bl	800700c <USBD_CtlSendStatus>
 800611c:	e023      	b.n	8006166 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006124:	2b05      	cmp	r3, #5
 8006126:	d11e      	bne.n	8006166 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006130:	2100      	movs	r1, #0
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f001 ff5c 	bl	8007ff0 <USBD_LL_StallEP>
 8006138:	e015      	b.n	8006166 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800614c:	2b03      	cmp	r3, #3
 800614e:	d108      	bne.n	8006162 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	7afa      	ldrb	r2, [r7, #11]
 800615a:	4611      	mov	r1, r2
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	4798      	blx	r3
 8006160:	e001      	b.n	8006166 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006162:	2302      	movs	r3, #2
 8006164:	e000      	b.n	8006168 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	460b      	mov	r3, r1
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800617e:	7afb      	ldrb	r3, [r7, #11]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d17f      	bne.n	8006284 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3314      	adds	r3, #20
 8006188:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006190:	2b02      	cmp	r3, #2
 8006192:	d15c      	bne.n	800624e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	68da      	ldr	r2, [r3, #12]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	429a      	cmp	r2, r3
 800619e:	d915      	bls.n	80061cc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	1ad2      	subs	r2, r2, r3
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	461a      	mov	r2, r3
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fee5 	bl	8006f88 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061be:	2300      	movs	r3, #0
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f001 ffb9 	bl	800813c <USBD_LL_PrepareReceive>
 80061ca:	e04e      	b.n	800626a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	6912      	ldr	r2, [r2, #16]
 80061d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80061d8:	fb02 f201 	mul.w	r2, r2, r1
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11c      	bne.n	800621c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d316      	bcc.n	800621c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d20f      	bcs.n	800621c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2100      	movs	r1, #0
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fec1 	bl	8006f88 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800620e:	2300      	movs	r3, #0
 8006210:	2200      	movs	r2, #0
 8006212:	2100      	movs	r1, #0
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f001 ff91 	bl	800813c <USBD_LL_PrepareReceive>
 800621a:	e026      	b.n	800626a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800622e:	2b03      	cmp	r3, #3
 8006230:	d105      	bne.n	800623e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f001 fed5 	bl	8007ff0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fef3 	bl	8007032 <USBD_CtlReceiveStatus>
 800624c:	e00d      	b.n	800626a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006254:	2b04      	cmp	r3, #4
 8006256:	d004      	beq.n	8006262 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006262:	2180      	movs	r1, #128	; 0x80
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f001 fec3 	bl	8007ff0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006270:	2b01      	cmp	r3, #1
 8006272:	d11d      	bne.n	80062b0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff fe82 	bl	8005f7e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006282:	e015      	b.n	80062b0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00d      	beq.n	80062ac <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006296:	2b03      	cmp	r3, #3
 8006298:	d108      	bne.n	80062ac <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	7afa      	ldrb	r2, [r7, #11]
 80062a4:	4611      	mov	r1, r2
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	4798      	blx	r3
 80062aa:	e001      	b.n	80062b0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	e000      	b.n	80062b2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c2:	2340      	movs	r3, #64	; 0x40
 80062c4:	2200      	movs	r2, #0
 80062c6:	2100      	movs	r1, #0
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fe4c 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2240      	movs	r2, #64	; 0x40
 80062da:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062de:	2340      	movs	r3, #64	; 0x40
 80062e0:	2200      	movs	r2, #0
 80062e2:	2180      	movs	r1, #128	; 0x80
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 fe3e 	bl	8007f66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2240      	movs	r2, #64	; 0x40
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d009      	beq.n	8006332 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	6852      	ldr	r2, [r2, #4]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	4611      	mov	r1, r2
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
  }

  return USBD_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	78fa      	ldrb	r2, [r7, #3]
 800634c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2204      	movs	r2, #4
 8006374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006394:	2b04      	cmp	r3, #4
 8006396:	d105      	bne.n	80063a4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	370c      	adds	r7, #12
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b082      	sub	sp, #8
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	2b03      	cmp	r3, #3
 80063c2:	d10b      	bne.n	80063dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063d6:	69db      	ldr	r3, [r3, #28]
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d004      	beq.n	800640c <USBD_StdDevReq+0x24>
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d002      	beq.n	800640c <USBD_StdDevReq+0x24>
 8006406:	2b00      	cmp	r3, #0
 8006408:	d008      	beq.n	800641c <USBD_StdDevReq+0x34>
 800640a:	e04c      	b.n	80064a6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	6839      	ldr	r1, [r7, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	4798      	blx	r3
      break;
 800641a:	e049      	b.n	80064b0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	2b09      	cmp	r3, #9
 8006422:	d83a      	bhi.n	800649a <USBD_StdDevReq+0xb2>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <USBD_StdDevReq+0x44>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	0800647d 	.word	0x0800647d
 8006430:	08006491 	.word	0x08006491
 8006434:	0800649b 	.word	0x0800649b
 8006438:	08006487 	.word	0x08006487
 800643c:	0800649b 	.word	0x0800649b
 8006440:	0800645f 	.word	0x0800645f
 8006444:	08006455 	.word	0x08006455
 8006448:	0800649b 	.word	0x0800649b
 800644c:	08006473 	.word	0x08006473
 8006450:	08006469 	.word	0x08006469
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f9d4 	bl	8006804 <USBD_GetDescriptor>
          break;
 800645c:	e022      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fb61 	bl	8006b28 <USBD_SetAddress>
          break;
 8006466:	e01d      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fb9e 	bl	8006bac <USBD_SetConfig>
          break;
 8006470:	e018      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc27 	bl	8006cc8 <USBD_GetConfig>
          break;
 800647a:	e013      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc56 	bl	8006d30 <USBD_GetStatus>
          break;
 8006484:	e00e      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fc84 	bl	8006d96 <USBD_SetFeature>
          break;
 800648e:	e009      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006490:	6839      	ldr	r1, [r7, #0]
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fc93 	bl	8006dbe <USBD_ClrFeature>
          break;
 8006498:	e004      	b.n	80064a4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fcec 	bl	8006e7a <USBD_CtlError>
          break;
 80064a2:	bf00      	nop
      }
      break;
 80064a4:	e004      	b.n	80064b0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 fce6 	bl	8006e7a <USBD_CtlError>
      break;
 80064ae:	bf00      	nop
  }

  return ret;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop

080064bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d003      	beq.n	80064de <USBD_StdItfReq+0x22>
 80064d6:	2b40      	cmp	r3, #64	; 0x40
 80064d8:	d001      	beq.n	80064de <USBD_StdItfReq+0x22>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d12a      	bne.n	8006534 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e4:	3b01      	subs	r3, #1
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d81d      	bhi.n	8006526 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	889b      	ldrh	r3, [r3, #4]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d813      	bhi.n	800651c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	88db      	ldrh	r3, [r3, #6]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d110      	bne.n	8006530 <USBD_StdItfReq+0x74>
 800650e:	7bfb      	ldrb	r3, [r7, #15]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fd79 	bl	800700c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800651a:	e009      	b.n	8006530 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fcab 	bl	8006e7a <USBD_CtlError>
          break;
 8006524:	e004      	b.n	8006530 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006526:	6839      	ldr	r1, [r7, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fca6 	bl	8006e7a <USBD_CtlError>
          break;
 800652e:	e000      	b.n	8006532 <USBD_StdItfReq+0x76>
          break;
 8006530:	bf00      	nop
      }
      break;
 8006532:	e004      	b.n	800653e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006534:	6839      	ldr	r1, [r7, #0]
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fc9f 	bl	8006e7a <USBD_CtlError>
      break;
 800653c:	bf00      	nop
  }

  return USBD_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	889b      	ldrh	r3, [r3, #4]
 800655a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006564:	2b20      	cmp	r3, #32
 8006566:	d004      	beq.n	8006572 <USBD_StdEPReq+0x2a>
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d002      	beq.n	8006572 <USBD_StdEPReq+0x2a>
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <USBD_StdEPReq+0x3a>
 8006570:	e13d      	b.n	80067ee <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	4798      	blx	r3
      break;
 8006580:	e13a      	b.n	80067f8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800658a:	2b20      	cmp	r3, #32
 800658c:	d10a      	bne.n	80065a4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]

        return ret;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	e12a      	b.n	80067fa <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	785b      	ldrb	r3, [r3, #1]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d03e      	beq.n	800662a <USBD_StdEPReq+0xe2>
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d002      	beq.n	80065b6 <USBD_StdEPReq+0x6e>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d070      	beq.n	8006696 <USBD_StdEPReq+0x14e>
 80065b4:	e115      	b.n	80067e2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d002      	beq.n	80065c6 <USBD_StdEPReq+0x7e>
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d015      	beq.n	80065f0 <USBD_StdEPReq+0xa8>
 80065c4:	e02b      	b.n	800661e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065c6:	7bbb      	ldrb	r3, [r7, #14]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00c      	beq.n	80065e6 <USBD_StdEPReq+0x9e>
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d009      	beq.n	80065e6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80065d2:	7bbb      	ldrb	r3, [r7, #14]
 80065d4:	4619      	mov	r1, r3
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f001 fd0a 	bl	8007ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80065dc:	2180      	movs	r1, #128	; 0x80
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 fd06 	bl	8007ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065e4:	e020      	b.n	8006628 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 fc46 	bl	8006e7a <USBD_CtlError>
              break;
 80065ee:	e01b      	b.n	8006628 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10e      	bne.n	8006616 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00b      	beq.n	8006616 <USBD_StdEPReq+0xce>
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b80      	cmp	r3, #128	; 0x80
 8006602:	d008      	beq.n	8006616 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	88db      	ldrh	r3, [r3, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d104      	bne.n	8006616 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 fced 	bl	8007ff0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fcf8 	bl	800700c <USBD_CtlSendStatus>

              break;
 800661c:	e004      	b.n	8006628 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fc2a 	bl	8006e7a <USBD_CtlError>
              break;
 8006626:	bf00      	nop
          }
          break;
 8006628:	e0e0      	b.n	80067ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006630:	2b02      	cmp	r3, #2
 8006632:	d002      	beq.n	800663a <USBD_StdEPReq+0xf2>
 8006634:	2b03      	cmp	r3, #3
 8006636:	d015      	beq.n	8006664 <USBD_StdEPReq+0x11c>
 8006638:	e026      	b.n	8006688 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00c      	beq.n	800665a <USBD_StdEPReq+0x112>
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d009      	beq.n	800665a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f001 fcd0 	bl	8007ff0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 fccc 	bl	8007ff0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006658:	e01c      	b.n	8006694 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc0c 	bl	8006e7a <USBD_CtlError>
              break;
 8006662:	e017      	b.n	8006694 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	885b      	ldrh	r3, [r3, #2]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d112      	bne.n	8006692 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006676:	7bbb      	ldrb	r3, [r7, #14]
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 fcd7 	bl	800802e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fcc3 	bl	800700c <USBD_CtlSendStatus>
              }
              break;
 8006686:	e004      	b.n	8006692 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 fbf5 	bl	8006e7a <USBD_CtlError>
              break;
 8006690:	e000      	b.n	8006694 <USBD_StdEPReq+0x14c>
              break;
 8006692:	bf00      	nop
          }
          break;
 8006694:	e0aa      	b.n	80067ec <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669c:	2b02      	cmp	r3, #2
 800669e:	d002      	beq.n	80066a6 <USBD_StdEPReq+0x15e>
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d032      	beq.n	800670a <USBD_StdEPReq+0x1c2>
 80066a4:	e097      	b.n	80067d6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066a6:	7bbb      	ldrb	r3, [r7, #14]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <USBD_StdEPReq+0x174>
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b80      	cmp	r3, #128	; 0x80
 80066b0:	d004      	beq.n	80066bc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fbe0 	bl	8006e7a <USBD_CtlError>
                break;
 80066ba:	e091      	b.n	80067e0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da0b      	bge.n	80066dc <USBD_StdEPReq+0x194>
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	3310      	adds	r3, #16
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4413      	add	r3, r2
 80066d8:	3304      	adds	r3, #4
 80066da:	e00b      	b.n	80066f4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066dc:	7bbb      	ldrb	r3, [r7, #14]
 80066de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	3304      	adds	r3, #4
 80066f4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2202      	movs	r2, #2
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fc24 	bl	8006f50 <USBD_CtlSendData>
              break;
 8006708:	e06a      	b.n	80067e0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800670a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800670e:	2b00      	cmp	r3, #0
 8006710:	da11      	bge.n	8006736 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006712:	7bbb      	ldrb	r3, [r7, #14]
 8006714:	f003 020f 	and.w	r2, r3, #15
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	3318      	adds	r3, #24
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d117      	bne.n	800675c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fba3 	bl	8006e7a <USBD_CtlError>
                  break;
 8006734:	e054      	b.n	80067e0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fb90 	bl	8006e7a <USBD_CtlError>
                  break;
 800675a:	e041      	b.n	80067e0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800675c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	da0b      	bge.n	800677c <USBD_StdEPReq+0x234>
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800676a:	4613      	mov	r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	3310      	adds	r3, #16
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	3304      	adds	r3, #4
 800677a:	e00b      	b.n	8006794 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006782:	4613      	mov	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006796:	7bbb      	ldrb	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <USBD_StdEPReq+0x25a>
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b80      	cmp	r3, #128	; 0x80
 80067a0:	d103      	bne.n	80067aa <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	e00e      	b.n	80067c8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	4619      	mov	r1, r3
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fc5c 	bl	800806c <USBD_LL_IsStallEP>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2201      	movs	r2, #1
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	e002      	b.n	80067c8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2202      	movs	r2, #2
 80067cc:	4619      	mov	r1, r3
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fbbe 	bl	8006f50 <USBD_CtlSendData>
              break;
 80067d4:	e004      	b.n	80067e0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb4e 	bl	8006e7a <USBD_CtlError>
              break;
 80067de:	bf00      	nop
          }
          break;
 80067e0:	e004      	b.n	80067ec <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fb48 	bl	8006e7a <USBD_CtlError>
          break;
 80067ea:	bf00      	nop
      }
      break;
 80067ec:	e004      	b.n	80067f8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80067ee:	6839      	ldr	r1, [r7, #0]
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 fb42 	bl	8006e7a <USBD_CtlError>
      break;
 80067f6:	bf00      	nop
  }

  return ret;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	885b      	ldrh	r3, [r3, #2]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	2b0e      	cmp	r3, #14
 8006826:	f200 8152 	bhi.w	8006ace <USBD_GetDescriptor+0x2ca>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <USBD_GetDescriptor+0x2c>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	080068a1 	.word	0x080068a1
 8006834:	080068b9 	.word	0x080068b9
 8006838:	080068f9 	.word	0x080068f9
 800683c:	08006acf 	.word	0x08006acf
 8006840:	08006acf 	.word	0x08006acf
 8006844:	08006a6f 	.word	0x08006a6f
 8006848:	08006a9b 	.word	0x08006a9b
 800684c:	08006acf 	.word	0x08006acf
 8006850:	08006acf 	.word	0x08006acf
 8006854:	08006acf 	.word	0x08006acf
 8006858:	08006acf 	.word	0x08006acf
 800685c:	08006acf 	.word	0x08006acf
 8006860:	08006acf 	.word	0x08006acf
 8006864:	08006acf 	.word	0x08006acf
 8006868:	0800686d 	.word	0x0800686d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7c12      	ldrb	r2, [r2, #16]
 8006884:	f107 0108 	add.w	r1, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800688e:	e126      	b.n	8006ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 faf1 	bl	8006e7a <USBD_CtlError>
        err++;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	3301      	adds	r3, #1
 800689c:	72fb      	strb	r3, [r7, #11]
      break;
 800689e:	e11e      	b.n	8006ade <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	7c12      	ldrb	r2, [r2, #16]
 80068ac:	f107 0108 	add.w	r1, r7, #8
 80068b0:	4610      	mov	r0, r2
 80068b2:	4798      	blx	r3
 80068b4:	60f8      	str	r0, [r7, #12]
      break;
 80068b6:	e112      	b.n	8006ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	7c1b      	ldrb	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10d      	bne.n	80068dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c8:	f107 0208 	add.w	r2, r7, #8
 80068cc:	4610      	mov	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	3301      	adds	r3, #1
 80068d6:	2202      	movs	r2, #2
 80068d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80068da:	e100      	b.n	8006ade <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	f107 0208 	add.w	r2, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
      break;
 80068f6:	e0f2      	b.n	8006ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b05      	cmp	r3, #5
 8006900:	f200 80ac 	bhi.w	8006a5c <USBD_GetDescriptor+0x258>
 8006904:	a201      	add	r2, pc, #4	; (adr r2, 800690c <USBD_GetDescriptor+0x108>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006925 	.word	0x08006925
 8006910:	08006959 	.word	0x08006959
 8006914:	0800698d 	.word	0x0800698d
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069f5 	.word	0x080069f5
 8006920:	08006a29 	.word	0x08006a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00b      	beq.n	8006948 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	7c12      	ldrb	r2, [r2, #16]
 800693c:	f107 0108 	add.w	r1, r7, #8
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
 8006944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006946:	e091      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fa95 	bl	8006e7a <USBD_CtlError>
            err++;
 8006950:	7afb      	ldrb	r3, [r7, #11]
 8006952:	3301      	adds	r3, #1
 8006954:	72fb      	strb	r3, [r7, #11]
          break;
 8006956:	e089      	b.n	8006a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	7c12      	ldrb	r2, [r2, #16]
 8006970:	f107 0108 	add.w	r1, r7, #8
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
 8006978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697a:	e077      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa7b 	bl	8006e7a <USBD_CtlError>
            err++;
 8006984:	7afb      	ldrb	r3, [r7, #11]
 8006986:	3301      	adds	r3, #1
 8006988:	72fb      	strb	r3, [r7, #11]
          break;
 800698a:	e06f      	b.n	8006a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00b      	beq.n	80069b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	7c12      	ldrb	r2, [r2, #16]
 80069a4:	f107 0108 	add.w	r1, r7, #8
 80069a8:	4610      	mov	r0, r2
 80069aa:	4798      	blx	r3
 80069ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069ae:	e05d      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 fa61 	bl	8006e7a <USBD_CtlError>
            err++;
 80069b8:	7afb      	ldrb	r3, [r7, #11]
 80069ba:	3301      	adds	r3, #1
 80069bc:	72fb      	strb	r3, [r7, #11]
          break;
 80069be:	e055      	b.n	8006a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00b      	beq.n	80069e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	7c12      	ldrb	r2, [r2, #16]
 80069d8:	f107 0108 	add.w	r1, r7, #8
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
 80069e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e2:	e043      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80069e4:	6839      	ldr	r1, [r7, #0]
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fa47 	bl	8006e7a <USBD_CtlError>
            err++;
 80069ec:	7afb      	ldrb	r3, [r7, #11]
 80069ee:	3301      	adds	r3, #1
 80069f0:	72fb      	strb	r3, [r7, #11]
          break;
 80069f2:	e03b      	b.n	8006a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80069fa:	695b      	ldr	r3, [r3, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	7c12      	ldrb	r2, [r2, #16]
 8006a0c:	f107 0108 	add.w	r1, r7, #8
 8006a10:	4610      	mov	r0, r2
 8006a12:	4798      	blx	r3
 8006a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a16:	e029      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa2d 	bl	8006e7a <USBD_CtlError>
            err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
          break;
 8006a26:	e021      	b.n	8006a6c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	7c12      	ldrb	r2, [r2, #16]
 8006a40:	f107 0108 	add.w	r1, r7, #8
 8006a44:	4610      	mov	r0, r2
 8006a46:	4798      	blx	r3
 8006a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4a:	e00f      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fa13 	bl	8006e7a <USBD_CtlError>
            err++;
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	3301      	adds	r3, #1
 8006a58:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5a:	e007      	b.n	8006a6c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa0b 	bl	8006e7a <USBD_CtlError>
          err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006a6a:	e038      	b.n	8006ade <USBD_GetDescriptor+0x2da>
 8006a6c:	e037      	b.n	8006ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7c1b      	ldrb	r3, [r3, #16]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d109      	bne.n	8006a8a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a7e:	f107 0208 	add.w	r2, r7, #8
 8006a82:	4610      	mov	r0, r2
 8006a84:	4798      	blx	r3
 8006a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a88:	e029      	b.n	8006ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 f9f4 	bl	8006e7a <USBD_CtlError>
        err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
      break;
 8006a98:	e021      	b.n	8006ade <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	7c1b      	ldrb	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10d      	bne.n	8006abe <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aaa:	f107 0208 	add.w	r2, r7, #8
 8006aae:	4610      	mov	r0, r2
 8006ab0:	4798      	blx	r3
 8006ab2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	2207      	movs	r2, #7
 8006aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006abc:	e00f      	b.n	8006ade <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f9da 	bl	8006e7a <USBD_CtlError>
        err++;
 8006ac6:	7afb      	ldrb	r3, [r7, #11]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	72fb      	strb	r3, [r7, #11]
      break;
 8006acc:	e007      	b.n	8006ade <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f9d2 	bl	8006e7a <USBD_CtlError>
      err++;
 8006ad6:	7afb      	ldrb	r3, [r7, #11]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	72fb      	strb	r3, [r7, #11]
      break;
 8006adc:	bf00      	nop
  }

  if (err != 0U)
 8006ade:	7afb      	ldrb	r3, [r7, #11]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d11c      	bne.n	8006b1e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006ae4:	893b      	ldrh	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d011      	beq.n	8006b0e <USBD_GetDescriptor+0x30a>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	88db      	ldrh	r3, [r3, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00d      	beq.n	8006b0e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	88da      	ldrh	r2, [r3, #6]
 8006af6:	893b      	ldrh	r3, [r7, #8]
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf28      	it	cs
 8006afc:	4613      	movcs	r3, r2
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b02:	893b      	ldrh	r3, [r7, #8]
 8006b04:	461a      	mov	r2, r3
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa21 	bl	8006f50 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	88db      	ldrh	r3, [r3, #6]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d104      	bne.n	8006b20 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa78 	bl	800700c <USBD_CtlSendStatus>
 8006b1c:	e000      	b.n	8006b20 <USBD_GetDescriptor+0x31c>
    return;
 8006b1e:	bf00      	nop
    }
  }
}
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop

08006b28 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	889b      	ldrh	r3, [r3, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d130      	bne.n	8006b9c <USBD_SetAddress+0x74>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	88db      	ldrh	r3, [r3, #6]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d12c      	bne.n	8006b9c <USBD_SetAddress+0x74>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	2b7f      	cmp	r3, #127	; 0x7f
 8006b48:	d828      	bhi.n	8006b9c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d104      	bne.n	8006b6a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f989 	bl	8006e7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b68:	e01c      	b.n	8006ba4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7bfa      	ldrb	r2, [r7, #15]
 8006b6e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b72:	7bfb      	ldrb	r3, [r7, #15]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fa9e 	bl	80080b8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fa45 	bl	800700c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b90:	e008      	b.n	8006ba4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b9a:	e003      	b.n	8006ba4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b9c:	6839      	ldr	r1, [r7, #0]
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f96b 	bl	8006e7a <USBD_CtlError>
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3710      	adds	r7, #16
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	885b      	ldrh	r3, [r3, #2]
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	4b41      	ldr	r3, [pc, #260]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006bbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006bc0:	4b40      	ldr	r3, [pc, #256]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d904      	bls.n	8006bd2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f955 	bl	8006e7a <USBD_CtlError>
 8006bd0:	e075      	b.n	8006cbe <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d002      	beq.n	8006be2 <USBD_SetConfig+0x36>
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d023      	beq.n	8006c28 <USBD_SetConfig+0x7c>
 8006be0:	e062      	b.n	8006ca8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006be2:	4b38      	ldr	r3, [pc, #224]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01a      	beq.n	8006c20 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006bfc:	4b31      	ldr	r3, [pc, #196]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	4619      	mov	r1, r3
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f7ff f9c6 	bl	8005f94 <USBD_SetClassConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d104      	bne.n	8006c18 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f932 	bl	8006e7a <USBD_CtlError>
            return;
 8006c16:	e052      	b.n	8006cbe <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f9f7 	bl	800700c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c1e:	e04e      	b.n	8006cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9f3 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006c26:	e04a      	b.n	8006cbe <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8006c28:	4b26      	ldr	r3, [pc, #152]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d112      	bne.n	8006c56 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8006c38:	4b22      	ldr	r3, [pc, #136]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006c42:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	4619      	mov	r1, r3
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff f9c2 	bl	8005fd2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f9dc 	bl	800700c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006c54:	e033      	b.n	8006cbe <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8006c56:	4b1b      	ldr	r3, [pc, #108]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d01d      	beq.n	8006ca0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff f9b0 	bl	8005fd2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8006c72:	4b14      	ldr	r3, [pc, #80]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006c7c:	4b11      	ldr	r3, [pc, #68]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff f986 	bl	8005f94 <USBD_SetClassConfig>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d104      	bne.n	8006c98 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8f2 	bl	8006e7a <USBD_CtlError>
            return;
 8006c96:	e012      	b.n	8006cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f9b7 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006c9e:	e00e      	b.n	8006cbe <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9b3 	bl	800700c <USBD_CtlSendStatus>
        break;
 8006ca6:	e00a      	b.n	8006cbe <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8e5 	bl	8006e7a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8006cb0:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <USBD_SetConfig+0x118>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7ff f98b 	bl	8005fd2 <USBD_ClrClassConfig>
        break;
 8006cbc:	bf00      	nop
    }
  }
}
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	2000019c 	.word	0x2000019c

08006cc8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88db      	ldrh	r3, [r3, #6]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d004      	beq.n	8006ce4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8cc 	bl	8006e7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ce2:	e021      	b.n	8006d28 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	db17      	blt.n	8006d1e <USBD_GetConfig+0x56>
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	dd02      	ble.n	8006cf8 <USBD_GetConfig+0x30>
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d00b      	beq.n	8006d0e <USBD_GetConfig+0x46>
 8006cf6:	e012      	b.n	8006d1e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3308      	adds	r3, #8
 8006d02:	2201      	movs	r2, #1
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f922 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006d0c:	e00c      	b.n	8006d28 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3304      	adds	r3, #4
 8006d12:	2201      	movs	r2, #1
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f91a 	bl	8006f50 <USBD_CtlSendData>
        break;
 8006d1c:	e004      	b.n	8006d28 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f8aa 	bl	8006e7a <USBD_CtlError>
        break;
 8006d26:	bf00      	nop
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	3b01      	subs	r3, #1
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d81e      	bhi.n	8006d84 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	88db      	ldrh	r3, [r3, #6]
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d004      	beq.n	8006d58 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f892 	bl	8006e7a <USBD_CtlError>
        break;
 8006d56:	e01a      	b.n	8006d8e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	f043 0202 	orr.w	r2, r3, #2
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	330c      	adds	r3, #12
 8006d78:	2202      	movs	r2, #2
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f8e7 	bl	8006f50 <USBD_CtlSendData>
      break;
 8006d82:	e004      	b.n	8006d8e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006d84:	6839      	ldr	r1, [r7, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f877 	bl	8006e7a <USBD_CtlError>
      break;
 8006d8c:	bf00      	nop
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	885b      	ldrh	r3, [r3, #2]
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d106      	bne.n	8006db6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f92b 	bl	800700c <USBD_CtlSendStatus>
  }
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b082      	sub	sp, #8
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d80b      	bhi.n	8006dec <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d10c      	bne.n	8006df6 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f911 	bl	800700c <USBD_CtlSendStatus>
      }
      break;
 8006dea:	e004      	b.n	8006df6 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f843 	bl	8006e7a <USBD_CtlError>
      break;
 8006df4:	e000      	b.n	8006df8 <USBD_ClrFeature+0x3a>
      break;
 8006df6:	bf00      	nop
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781a      	ldrb	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	785a      	ldrb	r2, [r3, #1]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	3302      	adds	r3, #2
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	3303      	adds	r3, #3
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	b29a      	uxth	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	3305      	adds	r3, #5
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	3306      	adds	r3, #6
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	3307      	adds	r3, #7
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4413      	add	r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	80da      	strh	r2, [r3, #6]

}
 8006e6e:	bf00      	nop
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006e84:	2180      	movs	r1, #128	; 0x80
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 f8b2 	bl	8007ff0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f8ae 	bl	8007ff0 <USBD_LL_StallEP>
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d032      	beq.n	8006f18 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006eb2:	68f8      	ldr	r0, [r7, #12]
 8006eb4:	f000 f834 	bl	8006f20 <USBD_GetLen>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	75fa      	strb	r2, [r7, #23]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
 8006eda:	1c5a      	adds	r2, r3, #1
 8006edc:	75fa      	strb	r2, [r7, #23]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006ee8:	e012      	b.n	8006f10 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	60fa      	str	r2, [r7, #12]
 8006ef0:	7dfa      	ldrb	r2, [r7, #23]
 8006ef2:	1c51      	adds	r1, r2, #1
 8006ef4:	75f9      	strb	r1, [r7, #23]
 8006ef6:	4611      	mov	r1, r2
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	440a      	add	r2, r1
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	75fa      	strb	r2, [r7, #23]
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e8      	bne.n	8006eea <USBD_GetString+0x4e>
    }
  }
}
 8006f18:	bf00      	nop
 8006f1a:	3718      	adds	r7, #24
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006f2c:	e005      	b.n	8006f3a <USBD_GetLen+0x1a>
  {
    len++;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
 8006f30:	3301      	adds	r3, #1
 8006f32:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	3301      	adds	r3, #1
 8006f38:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f5      	bne.n	8006f2e <USBD_GetLen+0xe>
  }

  return len;
 8006f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2202      	movs	r2, #2
 8006f62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006f6c:	88fa      	ldrh	r2, [r7, #6]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	2100      	movs	r1, #0
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f001 f8bc 	bl	80080f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 f8aa 	bl	80080f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f001 f8af 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 f89d 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2204      	movs	r2, #4
 8007018:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800701c:	2300      	movs	r3, #0
 800701e:	2200      	movs	r2, #0
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f001 f867 	bl	80080f6 <USBD_LL_Transmit>

  return USBD_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2205      	movs	r2, #5
 800703e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007042:	2300      	movs	r3, #0
 8007044:	2200      	movs	r2, #0
 8007046:	2100      	movs	r1, #0
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f877 	bl	800813c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3708      	adds	r7, #8
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	; 0x30
 800705c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800706a:	1d3b      	adds	r3, r7, #4
 800706c:	2220      	movs	r2, #32
 800706e:	2100      	movs	r1, #0
 8007070:	4618      	mov	r0, r3
 8007072:	f001 fa75 	bl	8008560 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007076:	4b31      	ldr	r3, [pc, #196]	; (800713c <MX_ADC1_Init+0xe4>)
 8007078:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800707c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800707e:	4b2f      	ldr	r3, [pc, #188]	; (800713c <MX_ADC1_Init+0xe4>)
 8007080:	2200      	movs	r2, #0
 8007082:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007084:	4b2d      	ldr	r3, [pc, #180]	; (800713c <MX_ADC1_Init+0xe4>)
 8007086:	2200      	movs	r2, #0
 8007088:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800708a:	4b2c      	ldr	r3, [pc, #176]	; (800713c <MX_ADC1_Init+0xe4>)
 800708c:	2200      	movs	r2, #0
 800708e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007090:	4b2a      	ldr	r3, [pc, #168]	; (800713c <MX_ADC1_Init+0xe4>)
 8007092:	2200      	movs	r2, #0
 8007094:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007096:	4b29      	ldr	r3, [pc, #164]	; (800713c <MX_ADC1_Init+0xe4>)
 8007098:	2200      	movs	r2, #0
 800709a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800709c:	4b27      	ldr	r3, [pc, #156]	; (800713c <MX_ADC1_Init+0xe4>)
 800709e:	2204      	movs	r2, #4
 80070a0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80070a2:	4b26      	ldr	r3, [pc, #152]	; (800713c <MX_ADC1_Init+0xe4>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80070a8:	4b24      	ldr	r3, [pc, #144]	; (800713c <MX_ADC1_Init+0xe4>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80070ae:	4b23      	ldr	r3, [pc, #140]	; (800713c <MX_ADC1_Init+0xe4>)
 80070b0:	2201      	movs	r2, #1
 80070b2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <MX_ADC1_Init+0xe4>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80070bc:	4b1f      	ldr	r3, [pc, #124]	; (800713c <MX_ADC1_Init+0xe4>)
 80070be:	2200      	movs	r2, #0
 80070c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80070c2:	4b1e      	ldr	r3, [pc, #120]	; (800713c <MX_ADC1_Init+0xe4>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80070c8:	4b1c      	ldr	r3, [pc, #112]	; (800713c <MX_ADC1_Init+0xe4>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80070d0:	4b1a      	ldr	r3, [pc, #104]	; (800713c <MX_ADC1_Init+0xe4>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80070d6:	4b19      	ldr	r3, [pc, #100]	; (800713c <MX_ADC1_Init+0xe4>)
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80070de:	4817      	ldr	r0, [pc, #92]	; (800713c <MX_ADC1_Init+0xe4>)
 80070e0:	f7f9 faee 	bl	80006c0 <HAL_ADC_Init>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d001      	beq.n	80070ee <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80070ea:	f000 fbb9 	bl	8007860 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80070ee:	2300      	movs	r3, #0
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80070f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f6:	4619      	mov	r1, r3
 80070f8:	4810      	ldr	r0, [pc, #64]	; (800713c <MX_ADC1_Init+0xe4>)
 80070fa:	f7f9 fff3 	bl	80010e4 <HAL_ADCEx_MultiModeConfigChannel>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8007104:	f000 fbac 	bl	8007860 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <MX_ADC1_Init+0xe8>)
 800710a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800710c:	2306      	movs	r3, #6
 800710e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007114:	237f      	movs	r3, #127	; 0x7f
 8007116:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007118:	2304      	movs	r3, #4
 800711a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	4619      	mov	r1, r3
 8007124:	4805      	ldr	r0, [pc, #20]	; (800713c <MX_ADC1_Init+0xe4>)
 8007126:	f7f9 fc53 	bl	80009d0 <HAL_ADC_ConfigChannel>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8007130:	f000 fb96 	bl	8007860 <Error_Handler>
  }

}
 8007134:	bf00      	nop
 8007136:	3730      	adds	r7, #48	; 0x30
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000434 	.word	0x20000434
 8007140:	04300002 	.word	0x04300002

08007144 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b088      	sub	sp, #32
 8007148:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800714a:	463b      	mov	r3, r7
 800714c:	2220      	movs	r2, #32
 800714e:	2100      	movs	r1, #0
 8007150:	4618      	mov	r0, r3
 8007152:	f001 fa05 	bl	8008560 <memset>

  /** Common config 
  */
  hadc2.Instance = ADC2;
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007158:	4a2a      	ldr	r2, [pc, #168]	; (8007204 <MX_ADC2_Init+0xc0>)
 800715a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800715c:	4b28      	ldr	r3, [pc, #160]	; (8007200 <MX_ADC2_Init+0xbc>)
 800715e:	2200      	movs	r2, #0
 8007160:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007162:	4b27      	ldr	r3, [pc, #156]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007164:	2200      	movs	r2, #0
 8007166:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <MX_ADC2_Init+0xbc>)
 800716a:	2200      	movs	r2, #0
 800716c:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007170:	2200      	movs	r2, #0
 8007172:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007174:	4b22      	ldr	r3, [pc, #136]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007176:	2200      	movs	r2, #0
 8007178:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800717a:	4b21      	ldr	r3, [pc, #132]	; (8007200 <MX_ADC2_Init+0xbc>)
 800717c:	2204      	movs	r2, #4
 800717e:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8007180:	4b1f      	ldr	r3, [pc, #124]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007182:	2200      	movs	r2, #0
 8007184:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007186:	4b1e      	ldr	r3, [pc, #120]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007188:	2200      	movs	r2, #0
 800718a:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800718c:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <MX_ADC2_Init+0xbc>)
 800718e:	2201      	movs	r2, #1
 8007190:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007192:	4b1b      	ldr	r3, [pc, #108]	; (8007200 <MX_ADC2_Init+0xbc>)
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800719a:	4b19      	ldr	r3, [pc, #100]	; (8007200 <MX_ADC2_Init+0xbc>)
 800719c:	2200      	movs	r2, #0
 800719e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80071a6:	4b16      	ldr	r3, [pc, #88]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80071b4:	4b12      	ldr	r3, [pc, #72]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80071bc:	4810      	ldr	r0, [pc, #64]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071be:	f7f9 fa7f 	bl	80006c0 <HAL_ADC_Init>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80071c8:	f000 fb4a 	bl	8007860 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <MX_ADC2_Init+0xc4>)
 80071ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80071d0:	2306      	movs	r3, #6
 80071d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80071d8:	237f      	movs	r3, #127	; 0x7f
 80071da:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80071dc:	2304      	movs	r3, #4
 80071de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80071e4:	463b      	mov	r3, r7
 80071e6:	4619      	mov	r1, r3
 80071e8:	4805      	ldr	r0, [pc, #20]	; (8007200 <MX_ADC2_Init+0xbc>)
 80071ea:	f7f9 fbf1 	bl	80009d0 <HAL_ADC_ConfigChannel>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80071f4:	f000 fb34 	bl	8007860 <Error_Handler>
  }

}
 80071f8:	bf00      	nop
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	200003c8 	.word	0x200003c8
 8007204:	50000100 	.word	0x50000100
 8007208:	10c00010 	.word	0x10c00010

0800720c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08e      	sub	sp, #56	; 0x38
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007218:	2200      	movs	r2, #0
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	605a      	str	r2, [r3, #4]
 800721e:	609a      	str	r2, [r3, #8]
 8007220:	60da      	str	r2, [r3, #12]
 8007222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800722c:	d15e      	bne.n	80072ec <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800722e:	4b57      	ldr	r3, [pc, #348]	; (800738c <HAL_ADC_MspInit+0x180>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3301      	adds	r3, #1
 8007234:	4a55      	ldr	r2, [pc, #340]	; (800738c <HAL_ADC_MspInit+0x180>)
 8007236:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007238:	4b54      	ldr	r3, [pc, #336]	; (800738c <HAL_ADC_MspInit+0x180>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d10b      	bne.n	8007258 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007240:	4b53      	ldr	r3, [pc, #332]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007244:	4a52      	ldr	r2, [pc, #328]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800724a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800724c:	4b50      	ldr	r3, [pc, #320]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800724e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007254:	623b      	str	r3, [r7, #32]
 8007256:	6a3b      	ldr	r3, [r7, #32]
    }
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007258:	4b4d      	ldr	r3, [pc, #308]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800725c:	4a4c      	ldr	r2, [pc, #304]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800725e:	f043 0320 	orr.w	r3, r3, #32
 8007262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007264:	4b4a      	ldr	r3, [pc, #296]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007268:	f003 0320 	and.w	r3, r3, #32
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007270:	4b47      	ldr	r3, [pc, #284]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007274:	4a46      	ldr	r2, [pc, #280]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800727c:	4b44      	ldr	r3, [pc, #272]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800727e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	61bb      	str	r3, [r7, #24]
 8007286:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007288:	4b41      	ldr	r3, [pc, #260]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800728a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800728c:	4a40      	ldr	r2, [pc, #256]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800728e:	f043 0302 	orr.w	r3, r3, #2
 8007292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007294:	4b3e      	ldr	r3, [pc, #248]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	697b      	ldr	r3, [r7, #20]
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = Vcell5_Pin;
 80072a0:	2301      	movs	r3, #1
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072a4:	2303      	movs	r3, #3
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Vcell5_GPIO_Port, &GPIO_InitStruct);
 80072ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072b0:	4619      	mov	r1, r3
 80072b2:	4838      	ldr	r0, [pc, #224]	; (8007394 <HAL_ADC_MspInit+0x188>)
 80072b4:	f7fa fb40 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vcell1_Pin|Vcell2_Pin|Vcell3_Pin|Vcell4_Pin;
 80072b8:	230f      	movs	r3, #15
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072bc:	2303      	movs	r3, #3
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072c0:	2300      	movs	r3, #0
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072c8:	4619      	mov	r1, r3
 80072ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80072ce:	f7fa fb33 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vcell6_Pin;
 80072d2:	2301      	movs	r3, #1
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80072d6:	2303      	movs	r3, #3
 80072d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Vcell6_GPIO_Port, &GPIO_InitStruct);
 80072de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072e2:	4619      	mov	r1, r3
 80072e4:	482c      	ldr	r0, [pc, #176]	; (8007398 <HAL_ADC_MspInit+0x18c>)
 80072e6:	f7fa fb27 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80072ea:	e04a      	b.n	8007382 <HAL_ADC_MspInit+0x176>
  else if(adcHandle->Instance==ADC2)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a2a      	ldr	r2, [pc, #168]	; (800739c <HAL_ADC_MspInit+0x190>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d145      	bne.n	8007382 <HAL_ADC_MspInit+0x176>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80072f6:	4b25      	ldr	r3, [pc, #148]	; (800738c <HAL_ADC_MspInit+0x180>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3301      	adds	r3, #1
 80072fc:	4a23      	ldr	r2, [pc, #140]	; (800738c <HAL_ADC_MspInit+0x180>)
 80072fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8007300:	4b22      	ldr	r3, [pc, #136]	; (800738c <HAL_ADC_MspInit+0x180>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d10b      	bne.n	8007320 <HAL_ADC_MspInit+0x114>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8007308:	4b21      	ldr	r3, [pc, #132]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800730a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800730c:	4a20      	ldr	r2, [pc, #128]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800730e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007324:	4a1a      	ldr	r2, [pc, #104]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007326:	f043 0320 	orr.w	r3, r3, #32
 800732a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800732c:	4b18      	ldr	r3, [pc, #96]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800732e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	60fb      	str	r3, [r7, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007338:	4b15      	ldr	r3, [pc, #84]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800733a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733c:	4a14      	ldr	r2, [pc, #80]	; (8007390 <HAL_ADC_MspInit+0x184>)
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007344:	4b12      	ldr	r3, [pc, #72]	; (8007390 <HAL_ADC_MspInit+0x184>)
 8007346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	60bb      	str	r3, [r7, #8]
 800734e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Vimeas_Pin;
 8007350:	2302      	movs	r3, #2
 8007352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007354:	2303      	movs	r3, #3
 8007356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007358:	2300      	movs	r3, #0
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Vimeas_GPIO_Port, &GPIO_InitStruct);
 800735c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007360:	4619      	mov	r1, r3
 8007362:	480c      	ldr	r0, [pc, #48]	; (8007394 <HAL_ADC_MspInit+0x188>)
 8007364:	f7fa fae8 	bl	8001938 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBat_Pin;
 8007368:	2380      	movs	r3, #128	; 0x80
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800736c:	2303      	movs	r3, #3
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007370:	2300      	movs	r3, #0
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBat_GPIO_Port, &GPIO_InitStruct);
 8007374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007378:	4619      	mov	r1, r3
 800737a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800737e:	f7fa fadb 	bl	8001938 <HAL_GPIO_Init>
}
 8007382:	bf00      	nop
 8007384:	3738      	adds	r7, #56	; 0x38
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	200001a0 	.word	0x200001a0
 8007390:	40021000 	.word	0x40021000
 8007394:	48001400 	.word	0x48001400
 8007398:	48000400 	.word	0x48000400
 800739c:	50000100 	.word	0x50000100

080073a0 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 80073a4:	4b06      	ldr	r3, [pc, #24]	; (80073c0 <MX_CORDIC_Init+0x20>)
 80073a6:	4a07      	ldr	r2, [pc, #28]	; (80073c4 <MX_CORDIC_Init+0x24>)
 80073a8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <MX_CORDIC_Init+0x20>)
 80073ac:	f7f9 ff3a 	bl	8001224 <HAL_CORDIC_Init>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80073b6:	f000 fa53 	bl	8007860 <Error_Handler>
  }

}
 80073ba:	bf00      	nop
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	200004a0 	.word	0x200004a0
 80073c4:	40020c00 	.word	0x40020c00

080073c8 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a0a      	ldr	r2, [pc, #40]	; (8007400 <HAL_CORDIC_MspInit+0x38>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d10b      	bne.n	80073f2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_CORDIC_MspInit+0x3c>)
 80073dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <HAL_CORDIC_MspInit+0x3c>)
 80073e0:	f043 0308 	orr.w	r3, r3, #8
 80073e4:	6493      	str	r3, [r2, #72]	; 0x48
 80073e6:	4b07      	ldr	r3, [pc, #28]	; (8007404 <HAL_CORDIC_MspInit+0x3c>)
 80073e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ea:	f003 0308 	and.w	r3, r3, #8
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40020c00 	.word	0x40020c00
 8007404:	40021000 	.word	0x40021000

08007408 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08c      	sub	sp, #48	; 0x30
 800740c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800740e:	463b      	mov	r3, r7
 8007410:	2230      	movs	r2, #48	; 0x30
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f001 f8a3 	bl	8008560 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800741a:	4b16      	ldr	r3, [pc, #88]	; (8007474 <MX_DAC1_Init+0x6c>)
 800741c:	4a16      	ldr	r2, [pc, #88]	; (8007478 <MX_DAC1_Init+0x70>)
 800741e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007420:	4814      	ldr	r0, [pc, #80]	; (8007474 <MX_DAC1_Init+0x6c>)
 8007422:	f7fa f840 	bl	80014a6 <HAL_DAC_Init>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800742c:	f000 fa18 	bl	8007860 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8007430:	2302      	movs	r3, #2
 8007432:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007434:	2300      	movs	r3, #0
 8007436:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007438:	2300      	movs	r3, #0
 800743a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800743c:	2300      	movs	r3, #0
 800743e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007448:	2300      	movs	r3, #0
 800744a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800744c:	2305      	movs	r3, #5
 800744e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007450:	2300      	movs	r3, #0
 8007452:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007454:	463b      	mov	r3, r7
 8007456:	2200      	movs	r2, #0
 8007458:	4619      	mov	r1, r3
 800745a:	4806      	ldr	r0, [pc, #24]	; (8007474 <MX_DAC1_Init+0x6c>)
 800745c:	f7fa f8c0 	bl	80015e0 <HAL_DAC_ConfigChannel>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8007466:	f000 f9fb 	bl	8007860 <Error_Handler>
  }

}
 800746a:	bf00      	nop
 800746c:	3730      	adds	r7, #48	; 0x30
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	200004c8 	.word	0x200004c8
 8007478:	50000800 	.word	0x50000800

0800747c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	; 0x28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007484:	f107 0314 	add.w	r3, r7, #20
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_DAC_MspInit+0x74>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d124      	bne.n	80074e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800749e:	4b15      	ldr	r3, [pc, #84]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a2:	4a14      	ldr	r2, [pc, #80]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074aa:	4b12      	ldr	r3, [pc, #72]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b6:	4b0f      	ldr	r3, [pc, #60]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ba:	4a0e      	ldr	r2, [pc, #56]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074bc:	f043 0301 	orr.w	r3, r3, #1
 80074c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074c2:	4b0c      	ldr	r3, [pc, #48]	; (80074f4 <HAL_DAC_MspInit+0x78>)
 80074c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c6:	f003 0301 	and.w	r3, r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = ISet_Pin;
 80074ce:	2310      	movs	r3, #16
 80074d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074d2:	2303      	movs	r3, #3
 80074d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ISet_GPIO_Port, &GPIO_InitStruct);
 80074da:	f107 0314 	add.w	r3, r7, #20
 80074de:	4619      	mov	r1, r3
 80074e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074e4:	f7fa fa28 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80074e8:	bf00      	nop
 80074ea:	3728      	adds	r7, #40	; 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	50000800 	.word	0x50000800
 80074f4:	40021000 	.word	0x40021000

080074f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b088      	sub	sp, #32
 80074fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	609a      	str	r2, [r3, #8]
 800750a:	60da      	str	r2, [r3, #12]
 800750c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800750e:	4b1f      	ldr	r3, [pc, #124]	; (800758c <MX_GPIO_Init+0x94>)
 8007510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007512:	4a1e      	ldr	r2, [pc, #120]	; (800758c <MX_GPIO_Init+0x94>)
 8007514:	f043 0320 	orr.w	r3, r3, #32
 8007518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800751a:	4b1c      	ldr	r3, [pc, #112]	; (800758c <MX_GPIO_Init+0x94>)
 800751c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	60bb      	str	r3, [r7, #8]
 8007524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007526:	4b19      	ldr	r3, [pc, #100]	; (800758c <MX_GPIO_Init+0x94>)
 8007528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800752a:	4a18      	ldr	r2, [pc, #96]	; (800758c <MX_GPIO_Init+0x94>)
 800752c:	f043 0301 	orr.w	r3, r3, #1
 8007530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007532:	4b16      	ldr	r3, [pc, #88]	; (800758c <MX_GPIO_Init+0x94>)
 8007534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	607b      	str	r3, [r7, #4]
 800753c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <MX_GPIO_Init+0x94>)
 8007540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007542:	4a12      	ldr	r2, [pc, #72]	; (800758c <MX_GPIO_Init+0x94>)
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800754a:	4b10      	ldr	r3, [pc, #64]	; (800758c <MX_GPIO_Init+0x94>)
 800754c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	603b      	str	r3, [r7, #0]
 8007554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_RESET);
 8007556:	2200      	movs	r2, #0
 8007558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800755c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007560:	f7fa fb6c 	bl	8001c3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Status_LED_Pin;
 8007564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007568:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800756a:	2301      	movs	r3, #1
 800756c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756e:	2300      	movs	r3, #0
 8007570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007572:	2300      	movs	r3, #0
 8007574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Status_LED_GPIO_Port, &GPIO_InitStruct);
 8007576:	f107 030c 	add.w	r3, r7, #12
 800757a:	4619      	mov	r1, r3
 800757c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007580:	f7fa f9da 	bl	8001938 <HAL_GPIO_Init>

}
 8007584:	bf00      	nop
 8007586:	3720      	adds	r7, #32
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40021000 	.word	0x40021000

08007590 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8007594:	4b1b      	ldr	r3, [pc, #108]	; (8007604 <MX_I2C1_Init+0x74>)
 8007596:	4a1c      	ldr	r2, [pc, #112]	; (8007608 <MX_I2C1_Init+0x78>)
 8007598:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <MX_I2C1_Init+0x74>)
 800759c:	4a1b      	ldr	r2, [pc, #108]	; (800760c <MX_I2C1_Init+0x7c>)
 800759e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80075a0:	4b18      	ldr	r3, [pc, #96]	; (8007604 <MX_I2C1_Init+0x74>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <MX_I2C1_Init+0x74>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80075ac:	4b15      	ldr	r3, [pc, #84]	; (8007604 <MX_I2C1_Init+0x74>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <MX_I2C1_Init+0x74>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80075b8:	4b12      	ldr	r3, [pc, #72]	; (8007604 <MX_I2C1_Init+0x74>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <MX_I2C1_Init+0x74>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075c4:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <MX_I2C1_Init+0x74>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075ca:	480e      	ldr	r0, [pc, #56]	; (8007604 <MX_I2C1_Init+0x74>)
 80075cc:	f7fa fb67 	bl	8001c9e <HAL_I2C_Init>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80075d6:	f000 f943 	bl	8007860 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80075da:	2100      	movs	r1, #0
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <MX_I2C1_Init+0x74>)
 80075de:	f7fa fbed 	bl	8001dbc <HAL_I2CEx_ConfigAnalogFilter>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80075e8:	f000 f93a 	bl	8007860 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80075ec:	2100      	movs	r1, #0
 80075ee:	4805      	ldr	r0, [pc, #20]	; (8007604 <MX_I2C1_Init+0x74>)
 80075f0:	f7fa fc2f 	bl	8001e52 <HAL_I2CEx_ConfigDigitalFilter>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80075fa:	f000 f931 	bl	8007860 <Error_Handler>
  }

}
 80075fe:	bf00      	nop
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	200004dc 	.word	0x200004dc
 8007608:	40005400 	.word	0x40005400
 800760c:	00303d5b 	.word	0x00303d5b

08007610 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b08a      	sub	sp, #40	; 0x28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	609a      	str	r2, [r3, #8]
 8007624:	60da      	str	r2, [r3, #12]
 8007626:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <HAL_I2C_MspInit+0xb8>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d145      	bne.n	80076be <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007632:	4b26      	ldr	r3, [pc, #152]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 8007634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007636:	4a25      	ldr	r2, [pc, #148]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800763e:	4b23      	ldr	r3, [pc, #140]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 8007640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800764a:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 800764c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800764e:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007656:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 8007658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8007662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007668:	2312      	movs	r3, #18
 800766a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800766c:	2301      	movs	r3, #1
 800766e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007670:	2300      	movs	r3, #0
 8007672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007674:	2304      	movs	r3, #4
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007678:	f107 0314 	add.w	r3, r7, #20
 800767c:	4619      	mov	r1, r3
 800767e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007682:	f7fa f959 	bl	8001938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8007686:	2380      	movs	r3, #128	; 0x80
 8007688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800768a:	2312      	movs	r3, #18
 800768c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800768e:	2301      	movs	r3, #1
 8007690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007692:	2300      	movs	r3, #0
 8007694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007696:	2304      	movs	r3, #4
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800769a:	f107 0314 	add.w	r3, r7, #20
 800769e:	4619      	mov	r1, r3
 80076a0:	480b      	ldr	r0, [pc, #44]	; (80076d0 <HAL_I2C_MspInit+0xc0>)
 80076a2:	f7fa f949 	bl	8001938 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80076a6:	4b09      	ldr	r3, [pc, #36]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	4a08      	ldr	r2, [pc, #32]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 80076ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076b0:	6593      	str	r3, [r2, #88]	; 0x58
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <HAL_I2C_MspInit+0xbc>)
 80076b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076ba:	60bb      	str	r3, [r7, #8]
 80076bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80076be:	bf00      	nop
 80076c0:	3728      	adds	r7, #40	; 0x28
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	40005400 	.word	0x40005400
 80076cc:	40021000 	.word	0x40021000
 80076d0:	48000400 	.word	0x48000400

080076d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80076da:	f7f8 fd9d 	bl	8000218 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80076de:	f000 f853 	bl	8007788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80076e2:	f7ff ff09 	bl	80074f8 <MX_GPIO_Init>
	MX_ADC1_Init();
 80076e6:	f7ff fcb7 	bl	8007058 <MX_ADC1_Init>
	MX_ADC2_Init();
 80076ea:	f7ff fd2b 	bl	8007144 <MX_ADC2_Init>
	MX_CORDIC_Init();
 80076ee:	f7ff fe57 	bl	80073a0 <MX_CORDIC_Init>
	MX_DAC1_Init();
 80076f2:	f7ff fe89 	bl	8007408 <MX_DAC1_Init>
	MX_I2C1_Init();
 80076f6:	f7ff ff4b 	bl	8007590 <MX_I2C1_Init>
	MX_TIM2_Init();
 80076fa:	f000 f93b 	bl	8007974 <MX_TIM2_Init>
	MX_USB_Device_Init();
 80076fe:	f000 f9e5 	bl	8007acc <MX_USB_Device_Init>
	/* USER CODE BEGIN 2 */

	uint16_t counter = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	81fb      	strh	r3, [r7, #14]
	uint8_t dir = 1;
 8007706:	2301      	movs	r3, #1
 8007708:	737b      	strb	r3, [r7, #13]
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 800770a:	2100      	movs	r1, #0
 800770c:	481d      	ldr	r0, [pc, #116]	; (8007784 <main+0xb0>)
 800770e:	f7f9 feec 	bl	80014ea <HAL_DAC_Start>
	HAL_GPIO_WritePin(Status_LED_GPIO_Port, Status_LED_Pin, GPIO_PIN_SET);
 8007712:	2201      	movs	r2, #1
 8007714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800771c:	f7fa fa8e 	bl	8001c3c <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (dir && counter < 4095)
 8007720:	7b7b      	ldrb	r3, [r7, #13]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d008      	beq.n	8007738 <main+0x64>
 8007726:	89fb      	ldrh	r3, [r7, #14]
 8007728:	f640 72fe 	movw	r2, #4094	; 0xffe
 800772c:	4293      	cmp	r3, r2
 800772e:	d803      	bhi.n	8007738 <main+0x64>
			counter++;
 8007730:	89fb      	ldrh	r3, [r7, #14]
 8007732:	3301      	adds	r3, #1
 8007734:	81fb      	strh	r3, [r7, #14]
 8007736:	e01b      	b.n	8007770 <main+0x9c>
		else if (!dir && counter > 0)
 8007738:	7b7b      	ldrb	r3, [r7, #13]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <main+0x78>
 800773e:	89fb      	ldrh	r3, [r7, #14]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <main+0x78>
			counter--;
 8007744:	89fb      	ldrh	r3, [r7, #14]
 8007746:	3b01      	subs	r3, #1
 8007748:	81fb      	strh	r3, [r7, #14]
 800774a:	e011      	b.n	8007770 <main+0x9c>
		else {
			dir = !dir;
 800774c:	7b7b      	ldrb	r3, [r7, #13]
 800774e:	2b00      	cmp	r3, #0
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	737b      	strb	r3, [r7, #13]
			HAL_GPIO_TogglePin(Status_LED_GPIO_Port, Status_LED_Pin);
 800775a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800775e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007762:	f7fa fa83 	bl	8001c6c <HAL_GPIO_TogglePin>
			uint8_t buf[12];
			CDC_Transmit_FS(buf, 12);
 8007766:	463b      	mov	r3, r7
 8007768:	210c      	movs	r1, #12
 800776a:	4618      	mov	r0, r3
 800776c:	f000 fa6c 	bl	8007c48 <CDC_Transmit_FS>
		}
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, counter);
 8007770:	89fb      	ldrh	r3, [r7, #14]
 8007772:	2200      	movs	r2, #0
 8007774:	2100      	movs	r1, #0
 8007776:	4803      	ldr	r0, [pc, #12]	; (8007784 <main+0xb0>)
 8007778:	f7f9 ff0a 	bl	8001590 <HAL_DAC_SetValue>

		HAL_Delay(4);
 800777c:	2004      	movs	r0, #4
 800777e:	f7f8 fdbb 	bl	80002f8 <HAL_Delay>
		if (dir && counter < 4095)
 8007782:	e7cd      	b.n	8007720 <main+0x4c>
 8007784:	200004c8 	.word	0x200004c8

08007788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8007788:	b580      	push	{r7, lr}
 800778a:	b0a4      	sub	sp, #144	; 0x90
 800778c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800778e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007792:	2238      	movs	r2, #56	; 0x38
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f000 fee2 	bl	8008560 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800779c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80077ac:	463b      	mov	r3, r7
 80077ae:	2244      	movs	r2, #68	; 0x44
 80077b0:	2100      	movs	r1, #0
 80077b2:	4618      	mov	r0, r3
 80077b4:	f000 fed4 	bl	8008560 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80077b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80077bc:	f7fb fab6 	bl	8002d2c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80077c0:	2302      	movs	r3, #2
 80077c2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80077c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077c8:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80077ca:	2340      	movs	r3, #64	; 0x40
 80077cc:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80077ce:	2302      	movs	r3, #2
 80077d0:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80077d2:	2302      	movs	r3, #2
 80077d4:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80077d6:	2302      	movs	r3, #2
 80077d8:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 12;
 80077da:	230c      	movs	r3, #12
 80077dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80077e0:	2302      	movs	r3, #2
 80077e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80077e6:	2302      	movs	r3, #2
 80077e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80077ec:	2302      	movs	r3, #2
 80077ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80077f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fb fb3c 	bl	8002e74 <HAL_RCC_OscConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <SystemClock_Config+0x7e>
		Error_Handler();
 8007802:	f000 f82d 	bl	8007860 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8007806:	230f      	movs	r3, #15
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800780a:	2301      	movs	r3, #1
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800780e:	2300      	movs	r3, #0
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007812:	2300      	movs	r3, #0
 8007814:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007816:	2300      	movs	r3, #0
 8007818:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800781a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f7fb fe3f 	bl	80034a4 <HAL_RCC_ClockConfig>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <SystemClock_Config+0xa8>
		Error_Handler();
 800782c:	f000 f818 	bl	8007860 <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_USB
 8007830:	f24a 0340 	movw	r3, #41024	; 0xa040
 8007834:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_ADC12;
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007836:	2300      	movs	r3, #0
 8007838:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800783a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8007840:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007844:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8007846:	463b      	mov	r3, r7
 8007848:	4618      	mov	r0, r3
 800784a:	f7fc f81b 	bl	8003884 <HAL_RCCEx_PeriphCLKConfig>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <SystemClock_Config+0xd0>
		Error_Handler();
 8007854:	f000 f804 	bl	8007860 <Error_Handler>
	}
}
 8007858:	bf00      	nop
 800785a:	3790      	adds	r7, #144	; 0x90
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007874:	4b05      	ldr	r3, [pc, #20]	; (800788c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	4a04      	ldr	r2, [pc, #16]	; (800788c <LL_PWR_DisableDeadBatteryPD+0x1c>)
 800787a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800787e:	6093      	str	r3, [r2, #8]
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	40007000 	.word	0x40007000

08007890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007896:	4b0f      	ldr	r3, [pc, #60]	; (80078d4 <HAL_MspInit+0x44>)
 8007898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800789a:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <HAL_MspInit+0x44>)
 800789c:	f043 0301 	orr.w	r3, r3, #1
 80078a0:	6613      	str	r3, [r2, #96]	; 0x60
 80078a2:	4b0c      	ldr	r3, [pc, #48]	; (80078d4 <HAL_MspInit+0x44>)
 80078a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <HAL_MspInit+0x44>)
 80078b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b2:	4a08      	ldr	r2, [pc, #32]	; (80078d4 <HAL_MspInit+0x44>)
 80078b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b8:	6593      	str	r3, [r2, #88]	; 0x58
 80078ba:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <HAL_MspInit+0x44>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80078c6:	f7ff ffd3 	bl	8007870 <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40021000 	.word	0x40021000

080078d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80078dc:	bf00      	nop
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078e6:	b480      	push	{r7}
 80078e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078ea:	e7fe      	b.n	80078ea <HardFault_Handler+0x4>

080078ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078f0:	e7fe      	b.n	80078f0 <MemManage_Handler+0x4>

080078f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078f2:	b480      	push	{r7}
 80078f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078f6:	e7fe      	b.n	80078f6 <BusFault_Handler+0x4>

080078f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078fc:	e7fe      	b.n	80078fc <UsageFault_Handler+0x4>

080078fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078fe:	b480      	push	{r7}
 8007900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007902:	bf00      	nop
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800791a:	b480      	push	{r7}
 800791c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800791e:	bf00      	nop
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800792c:	f7f8 fcc6 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007930:	bf00      	nop
 8007932:	bd80      	pop	{r7, pc}

08007934 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8007938:	4802      	ldr	r0, [pc, #8]	; (8007944 <USB_LP_IRQHandler+0x10>)
 800793a:	f7fa fbb3 	bl	80020a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800793e:	bf00      	nop
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000834 	.word	0x20000834

08007948 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007948:	b480      	push	{r7}
 800794a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800794c:	4b08      	ldr	r3, [pc, #32]	; (8007970 <SystemInit+0x28>)
 800794e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007952:	4a07      	ldr	r2, [pc, #28]	; (8007970 <SystemInit+0x28>)
 8007954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800795c:	4b04      	ldr	r3, [pc, #16]	; (8007970 <SystemInit+0x28>)
 800795e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007962:	609a      	str	r2, [r3, #8]
#endif
}
 8007964:	bf00      	nop
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000ed00 	.word	0xe000ed00

08007974 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08a      	sub	sp, #40	; 0x28
 8007978:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800797a:	f107 031c 	add.w	r3, r7, #28
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	605a      	str	r2, [r3, #4]
 8007984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007986:	463b      	mov	r3, r7
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	609a      	str	r2, [r3, #8]
 8007990:	60da      	str	r2, [r3, #12]
 8007992:	611a      	str	r2, [r3, #16]
 8007994:	615a      	str	r2, [r3, #20]
 8007996:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8007998:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <MX_TIM2_Init+0xac>)
 800799a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800799e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80079a0:	4b1f      	ldr	r3, [pc, #124]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80079ac:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079b2:	4b1b      	ldr	r3, [pc, #108]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079b4:	2200      	movs	r2, #0
 80079b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079b8:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079ba:	2200      	movs	r2, #0
 80079bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80079be:	4818      	ldr	r0, [pc, #96]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079c0:	f7fc f950 	bl	8003c64 <HAL_TIM_PWM_Init>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80079ca:	f7ff ff49 	bl	8007860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079ce:	2300      	movs	r3, #0
 80079d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079d2:	2300      	movs	r3, #0
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80079d6:	f107 031c 	add.w	r3, r7, #28
 80079da:	4619      	mov	r1, r3
 80079dc:	4810      	ldr	r0, [pc, #64]	; (8007a20 <MX_TIM2_Init+0xac>)
 80079de:	f7fc fe0b 	bl	80045f8 <HAL_TIMEx_MasterConfigSynchronization>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80079e8:	f7ff ff3a 	bl	8007860 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80079ec:	2360      	movs	r3, #96	; 0x60
 80079ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80079fc:	463b      	mov	r3, r7
 80079fe:	2208      	movs	r2, #8
 8007a00:	4619      	mov	r1, r3
 8007a02:	4807      	ldr	r0, [pc, #28]	; (8007a20 <MX_TIM2_Init+0xac>)
 8007a04:	f7fc f95a 	bl	8003cbc <HAL_TIM_PWM_ConfigChannel>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8007a0e:	f7ff ff27 	bl	8007860 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8007a12:	4803      	ldr	r0, [pc, #12]	; (8007a20 <MX_TIM2_Init+0xac>)
 8007a14:	f000 f824 	bl	8007a60 <HAL_TIM_MspPostInit>

}
 8007a18:	bf00      	nop
 8007a1a:	3728      	adds	r7, #40	; 0x28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	20000528 	.word	0x20000528

08007a24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a34:	d10b      	bne.n	8007a4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007a36:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <HAL_TIM_PWM_MspInit+0x38>)
 8007a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a3a:	4a08      	ldr	r2, [pc, #32]	; (8007a5c <HAL_TIM_PWM_MspInit+0x38>)
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	6593      	str	r3, [r2, #88]	; 0x58
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <HAL_TIM_PWM_MspInit+0x38>)
 8007a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	60fb      	str	r3, [r7, #12]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr
 8007a5a:	bf00      	nop
 8007a5c:	40021000 	.word	0x40021000

08007a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a68:	f107 030c 	add.w	r3, r7, #12
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	605a      	str	r2, [r3, #4]
 8007a72:	609a      	str	r2, [r3, #8]
 8007a74:	60da      	str	r2, [r3, #12]
 8007a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a80:	d11d      	bne.n	8007abe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a82:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_TIM_MspPostInit+0x68>)
 8007a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a86:	4a10      	ldr	r2, [pc, #64]	; (8007ac8 <HAL_TIM_MspPostInit+0x68>)
 8007a88:	f043 0301 	orr.w	r3, r3, #1
 8007a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a8e:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <HAL_TIM_MspPostInit+0x68>)
 8007a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	60bb      	str	r3, [r7, #8]
 8007a98:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA9     ------> TIM2_CH3 
    */
    GPIO_InitStruct.Pin = FAN_CMD_Pin;
 8007a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8007aac:	230a      	movs	r3, #10
 8007aae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_CMD_GPIO_Port, &GPIO_InitStruct);
 8007ab0:	f107 030c 	add.w	r3, r7, #12
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aba:	f7f9 ff3d 	bl	8001938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8007abe:	bf00      	nop
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40021000 	.word	0x40021000

08007acc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4912      	ldr	r1, [pc, #72]	; (8007b1c <MX_USB_Device_Init+0x50>)
 8007ad4:	4812      	ldr	r0, [pc, #72]	; (8007b20 <MX_USB_Device_Init+0x54>)
 8007ad6:	f7fe fa01 	bl	8005edc <USBD_Init>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007ae0:	f7ff febe 	bl	8007860 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007ae4:	490f      	ldr	r1, [pc, #60]	; (8007b24 <MX_USB_Device_Init+0x58>)
 8007ae6:	480e      	ldr	r0, [pc, #56]	; (8007b20 <MX_USB_Device_Init+0x54>)
 8007ae8:	f7fe fa23 	bl	8005f32 <USBD_RegisterClass>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007af2:	f7ff feb5 	bl	8007860 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8007af6:	490c      	ldr	r1, [pc, #48]	; (8007b28 <MX_USB_Device_Init+0x5c>)
 8007af8:	4809      	ldr	r0, [pc, #36]	; (8007b20 <MX_USB_Device_Init+0x54>)
 8007afa:	f7fe f951 	bl	8005da0 <USBD_CDC_RegisterInterface>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d001      	beq.n	8007b08 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007b04:	f7ff feac 	bl	8007860 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8007b08:	4805      	ldr	r0, [pc, #20]	; (8007b20 <MX_USB_Device_Init+0x54>)
 8007b0a:	f7fe fa2c 	bl	8005f66 <USBD_Start>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007b14:	f7ff fea4 	bl	8007860 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8007b18:	bf00      	nop
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	2000012c 	.word	0x2000012c
 8007b20:	20000568 	.word	0x20000568
 8007b24:	20000014 	.word	0x20000014
 8007b28:	2000011c 	.word	0x2000011c

08007b2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b30:	2200      	movs	r2, #0
 8007b32:	4905      	ldr	r1, [pc, #20]	; (8007b48 <CDC_Init_FS+0x1c>)
 8007b34:	4805      	ldr	r0, [pc, #20]	; (8007b4c <CDC_Init_FS+0x20>)
 8007b36:	f7fe f94a 	bl	8005dce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b3a:	4905      	ldr	r1, [pc, #20]	; (8007b50 <CDC_Init_FS+0x24>)
 8007b3c:	4803      	ldr	r0, [pc, #12]	; (8007b4c <CDC_Init_FS+0x20>)
 8007b3e:	f7fe f960 	bl	8005e02 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	20000830 	.word	0x20000830
 8007b4c:	20000568 	.word	0x20000568
 8007b50:	2000082c 	.word	0x2000082c

08007b54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b54:	b480      	push	{r7}
 8007b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

  return (USBD_OK);
 8007b58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	6039      	str	r1, [r7, #0]
 8007b6e:	71fb      	strb	r3, [r7, #7]
 8007b70:	4613      	mov	r3, r2
 8007b72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	2b23      	cmp	r3, #35	; 0x23
 8007b78:	d84a      	bhi.n	8007c10 <CDC_Control_FS+0xac>
 8007b7a:	a201      	add	r2, pc, #4	; (adr r2, 8007b80 <CDC_Control_FS+0x1c>)
 8007b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b80:	08007c11 	.word	0x08007c11
 8007b84:	08007c11 	.word	0x08007c11
 8007b88:	08007c11 	.word	0x08007c11
 8007b8c:	08007c11 	.word	0x08007c11
 8007b90:	08007c11 	.word	0x08007c11
 8007b94:	08007c11 	.word	0x08007c11
 8007b98:	08007c11 	.word	0x08007c11
 8007b9c:	08007c11 	.word	0x08007c11
 8007ba0:	08007c11 	.word	0x08007c11
 8007ba4:	08007c11 	.word	0x08007c11
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007c11 	.word	0x08007c11
 8007bb0:	08007c11 	.word	0x08007c11
 8007bb4:	08007c11 	.word	0x08007c11
 8007bb8:	08007c11 	.word	0x08007c11
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007c11 	.word	0x08007c11
 8007bc4:	08007c11 	.word	0x08007c11
 8007bc8:	08007c11 	.word	0x08007c11
 8007bcc:	08007c11 	.word	0x08007c11
 8007bd0:	08007c11 	.word	0x08007c11
 8007bd4:	08007c11 	.word	0x08007c11
 8007bd8:	08007c11 	.word	0x08007c11
 8007bdc:	08007c11 	.word	0x08007c11
 8007be0:	08007c11 	.word	0x08007c11
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	08007c11 	.word	0x08007c11
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c11 	.word	0x08007c11
 8007bf4:	08007c11 	.word	0x08007c11
 8007bf8:	08007c11 	.word	0x08007c11
 8007bfc:	08007c11 	.word	0x08007c11
 8007c00:	08007c11 	.word	0x08007c11
 8007c04:	08007c11 	.word	0x08007c11
 8007c08:	08007c11 	.word	0x08007c11
 8007c0c:	08007c11 	.word	0x08007c11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c10:	bf00      	nop
  }

  return (USBD_OK);
 8007c12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	4805      	ldr	r0, [pc, #20]	; (8007c44 <CDC_Receive_FS+0x24>)
 8007c2e:	f7fe f8e8 	bl	8005e02 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c32:	4804      	ldr	r0, [pc, #16]	; (8007c44 <CDC_Receive_FS+0x24>)
 8007c34:	f7fe f928 	bl	8005e88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000568 	.word	0x20000568

08007c48 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	460b      	mov	r3, r1
 8007c52:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c58:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <CDC_Transmit_FS+0x48>)
 8007c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c5e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e00b      	b.n	8007c86 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c6e:	887b      	ldrh	r3, [r7, #2]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4806      	ldr	r0, [pc, #24]	; (8007c90 <CDC_Transmit_FS+0x48>)
 8007c76:	f7fe f8aa 	bl	8005dce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c7a:	4805      	ldr	r0, [pc, #20]	; (8007c90 <CDC_Transmit_FS+0x48>)
 8007c7c:	f7fe f8d5 	bl	8005e2a <USBD_CDC_TransmitPacket>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000568 	.word	0x20000568

08007c94 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08a      	sub	sp, #40	; 0x28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c9c:	f107 0314 	add.w	r3, r7, #20
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a1b      	ldr	r2, [pc, #108]	; (8007d20 <HAL_PCD_MspInit+0x8c>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d12f      	bne.n	8007d16 <HAL_PCD_MspInit+0x82>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cb6:	4b1b      	ldr	r3, [pc, #108]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cba:	4a1a      	ldr	r2, [pc, #104]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007cc2:	4b18      	ldr	r3, [pc, #96]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	613b      	str	r3, [r7, #16]
 8007ccc:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007cce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cea:	f7f9 fe25 	bl	8001938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007cee:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf2:	4a0c      	ldr	r2, [pc, #48]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8007cfa:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <HAL_PCD_MspInit+0x90>)
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2014      	movs	r0, #20
 8007d0c:	f7f9 fb97 	bl	800143e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007d10:	2014      	movs	r0, #20
 8007d12:	f7f9 fbae 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d16:	bf00      	nop
 8007d18:	3728      	adds	r7, #40	; 0x28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40005c00 	.word	0x40005c00
 8007d24:	40021000 	.word	0x40021000

08007d28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f7fe f95a 	bl	8005ff8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007d44:	bf00      	nop
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	015b      	lsls	r3, r3, #5
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7fe f98d 	bl	800608e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8007d8e:	78fb      	ldrb	r3, [r7, #3]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	015b      	lsls	r3, r3, #5
 8007d94:	4413      	add	r3, r2
 8007d96:	333c      	adds	r3, #60	; 0x3c
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fe f9e7 	bl	8006170 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007da2:	bf00      	nop
 8007da4:	3708      	adds	r7, #8
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007db8:	4618      	mov	r0, r3
 8007dba:	f7fe fafa 	bl	80063b2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d001      	beq.n	8007dde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007dda:	f7ff fd41 	bl	8007860 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007de4:	7bfa      	ldrb	r2, [r7, #15]
 8007de6:	4611      	mov	r1, r2
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe faa7 	bl	800633c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fe fa60 	bl	80062ba <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe faa2 	bl	800635c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d005      	beq.n	8007e2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <HAL_PCD_SuspendCallback+0x30>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	4a03      	ldr	r2, [pc, #12]	; (8007e34 <HAL_PCD_SuspendCallback+0x30>)
 8007e26:	f043 0306 	orr.w	r3, r3, #6
 8007e2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	e000ed00 	.word	0xe000ed00

08007e38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d007      	beq.n	8007e58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e48:	4b08      	ldr	r3, [pc, #32]	; (8007e6c <HAL_PCD_ResumeCallback+0x34>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4a07      	ldr	r2, [pc, #28]	; (8007e6c <HAL_PCD_ResumeCallback+0x34>)
 8007e4e:	f023 0306 	bic.w	r3, r3, #6
 8007e52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007e54:	f000 f9f6 	bl	8008244 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe fa91 	bl	8006386 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007e78:	4a2b      	ldr	r2, [pc, #172]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a29      	ldr	r2, [pc, #164]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e84:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007e88:	4b27      	ldr	r3, [pc, #156]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e8a:	4a28      	ldr	r2, [pc, #160]	; (8007f2c <USBD_LL_Init+0xbc>)
 8007e8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e8e:	4b26      	ldr	r3, [pc, #152]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e90:	2208      	movs	r2, #8
 8007e92:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e96:	2202      	movs	r2, #2
 8007e98:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e9a:	4b23      	ldr	r3, [pc, #140]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007ea6:	4b20      	ldr	r3, [pc, #128]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007eac:	4b1e      	ldr	r3, [pc, #120]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007eb2:	4b1d      	ldr	r3, [pc, #116]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007eb8:	481b      	ldr	r0, [pc, #108]	; (8007f28 <USBD_LL_Init+0xb8>)
 8007eba:	f7fa f816 	bl	8001eea <HAL_PCD_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d001      	beq.n	8007ec8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007ec4:	f7ff fccc 	bl	8007860 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ece:	2318      	movs	r3, #24
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2100      	movs	r1, #0
 8007ed4:	f7fa fec2 	bl	8002c5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ede:	2358      	movs	r3, #88	; 0x58
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2180      	movs	r1, #128	; 0x80
 8007ee4:	f7fa feba 	bl	8002c5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007eee:	23c0      	movs	r3, #192	; 0xc0
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2181      	movs	r1, #129	; 0x81
 8007ef4:	f7fa feb2 	bl	8002c5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007efe:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f02:	2200      	movs	r2, #0
 8007f04:	2101      	movs	r1, #1
 8007f06:	f7fa fea9 	bl	8002c5c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f14:	2200      	movs	r2, #0
 8007f16:	2182      	movs	r1, #130	; 0x82
 8007f18:	f7fa fea0 	bl	8002c5c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000834 	.word	0x20000834
 8007f2c:	40005c00 	.word	0x40005c00

08007f30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fa f88a 	bl	8002060 <HAL_PCD_Start>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 f97c 	bl	8008250 <USBD_Get_USB_Status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007f5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}

08007f66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f66:	b580      	push	{r7, lr}
 8007f68:	b084      	sub	sp, #16
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	4608      	mov	r0, r1
 8007f70:	4611      	mov	r1, r2
 8007f72:	461a      	mov	r2, r3
 8007f74:	4603      	mov	r3, r0
 8007f76:	70fb      	strb	r3, [r7, #3]
 8007f78:	460b      	mov	r3, r1
 8007f7a:	70bb      	strb	r3, [r7, #2]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f8e:	78bb      	ldrb	r3, [r7, #2]
 8007f90:	883a      	ldrh	r2, [r7, #0]
 8007f92:	78f9      	ldrb	r1, [r7, #3]
 8007f94:	f7fa fa04 	bl	80023a0 <HAL_PCD_EP_Open>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 f956 	bl	8008250 <USBD_Get_USB_Status>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3710      	adds	r7, #16
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}

08007fb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fcc:	78fa      	ldrb	r2, [r7, #3]
 8007fce:	4611      	mov	r1, r2
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fa fa45 	bl	8002460 <HAL_PCD_EP_Close>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fda:	7bfb      	ldrb	r3, [r7, #15]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f937 	bl	8008250 <USBD_Get_USB_Status>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3710      	adds	r7, #16
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800800a:	78fa      	ldrb	r2, [r7, #3]
 800800c:	4611      	mov	r1, r2
 800800e:	4618      	mov	r0, r3
 8008010:	f7fa faf0 	bl	80025f4 <HAL_PCD_EP_SetStall>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f918 	bl	8008250 <USBD_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008024:	7bbb      	ldrb	r3, [r7, #14]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008048:	78fa      	ldrb	r2, [r7, #3]
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f7fa fb2b 	bl	80026a8 <HAL_PCD_EP_ClrStall>
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008056:	7bfb      	ldrb	r3, [r7, #15]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f8f9 	bl	8008250 <USBD_Get_USB_Status>
 800805e:	4603      	mov	r3, r0
 8008060:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008062:	7bbb      	ldrb	r3, [r7, #14]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008080:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008084:	2b00      	cmp	r3, #0
 8008086:	da08      	bge.n	800809a <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	015b      	lsls	r3, r3, #5
 8008092:	4413      	add	r3, r2
 8008094:	332a      	adds	r3, #42	; 0x2a
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	e008      	b.n	80080ac <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800809a:	78fb      	ldrb	r3, [r7, #3]
 800809c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	015b      	lsls	r3, r3, #5
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80080aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	4611      	mov	r1, r2
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fa f93d 	bl	8002356 <HAL_PCD_SetAddress>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f8b4 	bl	8008250 <USBD_Get_USB_Status>
 80080e8:	4603      	mov	r3, r0
 80080ea:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80080ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b086      	sub	sp, #24
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	461a      	mov	r2, r3
 8008102:	460b      	mov	r3, r1
 8008104:	72fb      	strb	r3, [r7, #11]
 8008106:	4613      	mov	r3, r2
 8008108:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008118:	893b      	ldrh	r3, [r7, #8]
 800811a:	7af9      	ldrb	r1, [r7, #11]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	f7fa fa30 	bl	8002582 <HAL_PCD_EP_Transmit>
 8008122:	4603      	mov	r3, r0
 8008124:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	4618      	mov	r0, r3
 800812a:	f000 f891 	bl	8008250 <USBD_Get_USB_Status>
 800812e:	4603      	mov	r3, r0
 8008130:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008132:	7dbb      	ldrb	r3, [r7, #22]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	461a      	mov	r2, r3
 8008148:	460b      	mov	r3, r1
 800814a:	72fb      	strb	r3, [r7, #11]
 800814c:	4613      	mov	r3, r2
 800814e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008150:	2300      	movs	r3, #0
 8008152:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800815e:	893b      	ldrh	r3, [r7, #8]
 8008160:	7af9      	ldrb	r1, [r7, #11]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	f7fa f9be 	bl	80024e4 <HAL_PCD_EP_Receive>
 8008168:	4603      	mov	r3, r0
 800816a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800816c:	7dfb      	ldrb	r3, [r7, #23]
 800816e:	4618      	mov	r0, r3
 8008170:	f000 f86e 	bl	8008250 <USBD_Get_USB_Status>
 8008174:	4603      	mov	r3, r0
 8008176:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008178:	7dbb      	ldrb	r3, [r7, #22]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	460b      	mov	r3, r1
 800818c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008194:	78fa      	ldrb	r2, [r7, #3]
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f7fa f9dd 	bl	8002558 <HAL_PCD_EP_GetRxCount>
 800819e:	4603      	mov	r3, r0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	460b      	mov	r3, r1
 80081b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d002      	beq.n	80081c0 <HAL_PCDEx_LPM_Callback+0x18>
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d013      	beq.n	80081e6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 80081be:	e023      	b.n	8008208 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	699b      	ldr	r3, [r3, #24]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d007      	beq.n	80081d8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80081c8:	f000 f83c 	bl	8008244 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081cc:	4b10      	ldr	r3, [pc, #64]	; (8008210 <HAL_PCDEx_LPM_Callback+0x68>)
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <HAL_PCDEx_LPM_Callback+0x68>)
 80081d2:	f023 0306 	bic.w	r3, r3, #6
 80081d6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe f8d1 	bl	8006386 <USBD_LL_Resume>
    break;
 80081e4:	e010      	b.n	8008208 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe f8b5 	bl	800635c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d005      	beq.n	8008206 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_PCDEx_LPM_Callback+0x68>)
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	4a04      	ldr	r2, [pc, #16]	; (8008210 <HAL_PCDEx_LPM_Callback+0x68>)
 8008200:	f043 0306 	orr.w	r3, r3, #6
 8008204:	6113      	str	r3, [r2, #16]
    break;   
 8008206:	bf00      	nop
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	e000ed00 	.word	0xe000ed00

08008214 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <USBD_static_malloc+0x18>)
}
 800821e:	4618      	mov	r0, r3
 8008220:	370c      	adds	r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200001a4 	.word	0x200001a4

08008230 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]

}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008248:	f7ff fa9e 	bl	8007788 <SystemClock_Config>
}
 800824c:	bf00      	nop
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d817      	bhi.n	8008294 <USBD_Get_USB_Status+0x44>
 8008264:	a201      	add	r2, pc, #4	; (adr r2, 800826c <USBD_Get_USB_Status+0x1c>)
 8008266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826a:	bf00      	nop
 800826c:	0800827d 	.word	0x0800827d
 8008270:	08008283 	.word	0x08008283
 8008274:	08008289 	.word	0x08008289
 8008278:	0800828f 	.word	0x0800828f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
    break;
 8008280:	e00b      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008282:	2302      	movs	r3, #2
 8008284:	73fb      	strb	r3, [r7, #15]
    break;
 8008286:	e008      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
    break;
 800828c:	e005      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800828e:	2302      	movs	r3, #2
 8008290:	73fb      	strb	r3, [r7, #15]
    break;
 8008292:	e002      	b.n	800829a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008294:	2302      	movs	r3, #2
 8008296:	73fb      	strb	r3, [r7, #15]
    break;
 8008298:	bf00      	nop
  }
  return usb_status;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	4603      	mov	r3, r0
 80082b0:	6039      	str	r1, [r7, #0]
 80082b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	2212      	movs	r2, #18
 80082b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80082ba:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80082bc:	4618      	mov	r0, r3
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr
 80082c8:	2000014c 	.word	0x2000014c

080082cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	4603      	mov	r3, r0
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2204      	movs	r2, #4
 80082dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082de:	4b03      	ldr	r3, [pc, #12]	; (80082ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000160 	.word	0x20000160

080082f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b082      	sub	sp, #8
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082fc:	79fb      	ldrb	r3, [r7, #7]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d105      	bne.n	800830e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	4907      	ldr	r1, [pc, #28]	; (8008324 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008306:	4808      	ldr	r0, [pc, #32]	; (8008328 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008308:	f7fe fdc8 	bl	8006e9c <USBD_GetString>
 800830c:	e004      	b.n	8008318 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	4904      	ldr	r1, [pc, #16]	; (8008324 <USBD_CDC_ProductStrDescriptor+0x34>)
 8008312:	4805      	ldr	r0, [pc, #20]	; (8008328 <USBD_CDC_ProductStrDescriptor+0x38>)
 8008314:	f7fe fdc2 	bl	8006e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008318:	4b02      	ldr	r3, [pc, #8]	; (8008324 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800831a:	4618      	mov	r0, r3
 800831c:	3708      	adds	r7, #8
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000aa8 	.word	0x20000aa8
 8008328:	08008588 	.word	0x08008588

0800832c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	4904      	ldr	r1, [pc, #16]	; (800834c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800833c:	4804      	ldr	r0, [pc, #16]	; (8008350 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800833e:	f7fe fdad 	bl	8006e9c <USBD_GetString>
  return USBD_StrDesc;
 8008342:	4b02      	ldr	r3, [pc, #8]	; (800834c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8008344:	4618      	mov	r0, r3
 8008346:	3708      	adds	r7, #8
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000aa8 	.word	0x20000aa8
 8008350:	080085a0 	.word	0x080085a0

08008354 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	221a      	movs	r2, #26
 8008364:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008366:	f000 f843 	bl	80083f0 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800836a:	4b02      	ldr	r3, [pc, #8]	; (8008374 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	20000164 	.word	0x20000164

08008378 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	6039      	str	r1, [r7, #0]
 8008382:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008384:	79fb      	ldrb	r3, [r7, #7]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d105      	bne.n	8008396 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	4907      	ldr	r1, [pc, #28]	; (80083ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800838e:	4808      	ldr	r0, [pc, #32]	; (80083b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8008390:	f7fe fd84 	bl	8006e9c <USBD_GetString>
 8008394:	e004      	b.n	80083a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	4904      	ldr	r1, [pc, #16]	; (80083ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800839a:	4805      	ldr	r0, [pc, #20]	; (80083b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800839c:	f7fe fd7e 	bl	8006e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a0:	4b02      	ldr	r3, [pc, #8]	; (80083ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000aa8 	.word	0x20000aa8
 80083b0:	080085b4 	.word	0x080085b4

080083b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b082      	sub	sp, #8
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	4603      	mov	r3, r0
 80083bc:	6039      	str	r1, [r7, #0]
 80083be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083c0:	79fb      	ldrb	r3, [r7, #7]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d105      	bne.n	80083d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80083ca:	4808      	ldr	r0, [pc, #32]	; (80083ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80083cc:	f7fe fd66 	bl	8006e9c <USBD_GetString>
 80083d0:	e004      	b.n	80083dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	4904      	ldr	r1, [pc, #16]	; (80083e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80083d6:	4805      	ldr	r0, [pc, #20]	; (80083ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80083d8:	f7fe fd60 	bl	8006e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80083dc:	4b02      	ldr	r3, [pc, #8]	; (80083e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000aa8 	.word	0x20000aa8
 80083ec:	080085c0 	.word	0x080085c0

080083f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <Get_SerialNum+0x44>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083fc:	4b0e      	ldr	r3, [pc, #56]	; (8008438 <Get_SerialNum+0x48>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008402:	4b0e      	ldr	r3, [pc, #56]	; (800843c <Get_SerialNum+0x4c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d009      	beq.n	800842a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008416:	2208      	movs	r2, #8
 8008418:	4909      	ldr	r1, [pc, #36]	; (8008440 <Get_SerialNum+0x50>)
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f814 	bl	8008448 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008420:	2204      	movs	r2, #4
 8008422:	4908      	ldr	r1, [pc, #32]	; (8008444 <Get_SerialNum+0x54>)
 8008424:	68b8      	ldr	r0, [r7, #8]
 8008426:	f000 f80f 	bl	8008448 <IntToUnicode>
  }
}
 800842a:	bf00      	nop
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	1fff7590 	.word	0x1fff7590
 8008438:	1fff7594 	.word	0x1fff7594
 800843c:	1fff7598 	.word	0x1fff7598
 8008440:	20000166 	.word	0x20000166
 8008444:	20000176 	.word	0x20000176

08008448 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008456:	2300      	movs	r3, #0
 8008458:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800845a:	2300      	movs	r3, #0
 800845c:	75fb      	strb	r3, [r7, #23]
 800845e:	e027      	b.n	80084b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	0f1b      	lsrs	r3, r3, #28
 8008464:	2b09      	cmp	r3, #9
 8008466:	d80b      	bhi.n	8008480 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	0f1b      	lsrs	r3, r3, #28
 800846c:	b2da      	uxtb	r2, r3
 800846e:	7dfb      	ldrb	r3, [r7, #23]
 8008470:	005b      	lsls	r3, r3, #1
 8008472:	4619      	mov	r1, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	440b      	add	r3, r1
 8008478:	3230      	adds	r2, #48	; 0x30
 800847a:	b2d2      	uxtb	r2, r2
 800847c:	701a      	strb	r2, [r3, #0]
 800847e:	e00a      	b.n	8008496 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	0f1b      	lsrs	r3, r3, #28
 8008484:	b2da      	uxtb	r2, r3
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	4619      	mov	r1, r3
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	440b      	add	r3, r1
 8008490:	3237      	adds	r2, #55	; 0x37
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	005b      	lsls	r3, r3, #1
 80084a0:	3301      	adds	r3, #1
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	4413      	add	r3, r2
 80084a6:	2200      	movs	r2, #0
 80084a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	3301      	adds	r3, #1
 80084ae:	75fb      	strb	r3, [r7, #23]
 80084b0:	7dfa      	ldrb	r2, [r7, #23]
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d3d3      	bcc.n	8008460 <IntToUnicode+0x18>
  }
}
 80084b8:	bf00      	nop
 80084ba:	371c      	adds	r7, #28
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80084c4:	480d      	ldr	r0, [pc, #52]	; (80084fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80084c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80084c8:	480d      	ldr	r0, [pc, #52]	; (8008500 <LoopForever+0x6>)
  ldr r1, =_edata
 80084ca:	490e      	ldr	r1, [pc, #56]	; (8008504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80084cc:	4a0e      	ldr	r2, [pc, #56]	; (8008508 <LoopForever+0xe>)
  movs r3, #0
 80084ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80084d0:	e002      	b.n	80084d8 <LoopCopyDataInit>

080084d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084d6:	3304      	adds	r3, #4

080084d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084dc:	d3f9      	bcc.n	80084d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084de:	4a0b      	ldr	r2, [pc, #44]	; (800850c <LoopForever+0x12>)
  ldr r4, =_ebss
 80084e0:	4c0b      	ldr	r4, [pc, #44]	; (8008510 <LoopForever+0x16>)
  movs r3, #0
 80084e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084e4:	e001      	b.n	80084ea <LoopFillZerobss>

080084e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084e8:	3204      	adds	r2, #4

080084ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084ec:	d3fb      	bcc.n	80084e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80084ee:	f7ff fa2b 	bl	8007948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084f2:	f000 f811 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80084f6:	f7ff f8ed 	bl	80076d4 <main>

080084fa <LoopForever>:

LoopForever:
    b LoopForever
 80084fa:	e7fe      	b.n	80084fa <LoopForever>
  ldr   r0, =_estack
 80084fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8008500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008504:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8008508:	080085e8 	.word	0x080085e8
  ldr r2, =_sbss
 800850c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8008510:	20000ca8 	.word	0x20000ca8

08008514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008514:	e7fe      	b.n	8008514 <ADC1_2_IRQHandler>
	...

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4e0d      	ldr	r6, [pc, #52]	; (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	; (8008554 <__libc_init_array+0x3c>)
 800851e:	1ba4      	subs	r4, r4, r6
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2500      	movs	r5, #0
 8008524:	42a5      	cmp	r5, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4e0b      	ldr	r6, [pc, #44]	; (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	; (800855c <__libc_init_array+0x44>)
 800852c:	f000 f820 	bl	8008570 <_init>
 8008530:	1ba4      	subs	r4, r4, r6
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2500      	movs	r5, #0
 8008536:	42a5      	cmp	r5, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008540:	4798      	blx	r3
 8008542:	3501      	adds	r5, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800854a:	4798      	blx	r3
 800854c:	3501      	adds	r5, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	080085e0 	.word	0x080085e0
 8008554:	080085e0 	.word	0x080085e0
 8008558:	080085e0 	.word	0x080085e0
 800855c:	080085e4 	.word	0x080085e4

08008560 <memset>:
 8008560:	4402      	add	r2, r0
 8008562:	4603      	mov	r3, r0
 8008564:	4293      	cmp	r3, r2
 8008566:	d100      	bne.n	800856a <memset+0xa>
 8008568:	4770      	bx	lr
 800856a:	f803 1b01 	strb.w	r1, [r3], #1
 800856e:	e7f9      	b.n	8008564 <memset+0x4>

08008570 <_init>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr

0800857c <_fini>:
 800857c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800857e:	bf00      	nop
 8008580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008582:	bc08      	pop	{r3}
 8008584:	469e      	mov	lr, r3
 8008586:	4770      	bx	lr
